<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Github on AswinBlue</title>
    <link>https://aswinblue.github.io/Blog/tags/github/</link>
    <description>Recent content in Github on AswinBlue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Jul 2025 22:20:09 +0900</lastBuildDate><atom:link href="https://aswinblue.github.io/Blog/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github Action</title>
      <link>https://aswinblue.github.io/Blog/post/git/github_action/</link>
      <pubDate>Sat, 19 Jul 2025 22:20:09 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/git/github_action/</guid>
      <description>&lt;h1 id=&#34;github-action&#34;&gt;Github Action&lt;/h1&gt;
&lt;p&gt;Github action 을 통해 github 에 코드를 push 함과 동시에 docker를 구동시켜 작업을 동작시킬수 있다.
이 문서는 React로 개발된 웹 애플리케이션을 GitHub Actions를 사용하여 &lt;strong&gt;자동으로 빌드하고 GitHub Pages에 배포&lt;/strong&gt;하는 파이프라인 구축 과정을 안내한다. &lt;code&gt;main&lt;/code&gt; (또는 &lt;code&gt;master&lt;/code&gt;) 브랜치에 코드를 &lt;code&gt;push&lt;/code&gt;하면 모든 과정이 자동으로 실행되도록 설정하는 것을 목표로 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-사전-준비&#34;&gt;1. 사전 준비&lt;/h2&gt;
&lt;p&gt;배포 자동화를 설정하기 전, React 프로젝트와 GitHub 저장소에 몇 가지 준비가 필요하다.&lt;/p&gt;
&lt;h3 id=&#34;11-packagejson-설정&#34;&gt;1.1. &lt;code&gt;package.json&lt;/code&gt; 설정&lt;/h3&gt;
&lt;p&gt;GitHub Pages는 보통 &lt;code&gt;https://&amp;lt;사용자명&amp;gt;.github.io/&amp;lt;저장소명&amp;gt;/&lt;/code&gt; 형태의 하위 경로에 배포된다. React 앱이 CSS나 JS 파일을 올바르게 찾아오게 하려면 &lt;code&gt;package.json&lt;/code&gt; 파일에 &lt;code&gt;homepage&lt;/code&gt; 속성을 추가해야 한다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
