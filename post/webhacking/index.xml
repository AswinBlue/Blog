<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WebHacking on AswinBlue</title>
    <link>https://aswinblue.github.io/Blog/post/webhacking/</link>
    <description>Recent content in WebHacking on AswinBlue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Mar 2025 20:16:45 +0900</lastBuildDate><atom:link href="https://aswinblue.github.io/Blog/post/webhacking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploit</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/exploit/</link>
      <pubDate>Tue, 11 Mar 2025 20:54:59 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/exploit/</guid>
      <description>공격 방법 분류 Server side 공격 방법 Injection (인젝션) 서버의 처리 과정 중 사용자가 입력한 데이터가 시스템의 다른 기능을 주거나 문법적으로 사용되어 발생하는 취약점 injection 공격의 종류 SQL Injection Command Injection SSTI (Server Side Template Injection) Path Traversal SSRF (Server Side Request Forgery) ORM과 같이 검증된 SQL 라이브러리를 사용하여 방어가 필요하다. File vulnerability 서버의 파일 시스템에 사용자가 원하는 행위를 할 수 있을 때 발생하는 취약점 system(PHP), child_process(Node JS), os.system(Python) 등 OS command를 실행하는 함수를 호출하지 않는 방법이 가장 좋으나, 입력 필터링이나 대체 라이브러리를 사용하는 방법으로 위협을 줄일 수 있다.</description>
    </item>
    
    <item>
      <title>Cookie</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/cookie/</link>
      <pubDate>Sun, 09 Mar 2025 16:10:13 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/cookie/</guid>
      <description>Cookie HTTP의 특징(Connectionless, Stateless) 때문에 Web Server 는 HTTP로 요청된 패킷들이 어떤 Web Client에서 전달된 것인지 구분할 수 없다. IP 주소와 User-Agent 등의 정보는 매번 변경될 수 있다. Client의 정보와 요청의 내용을 구체화하기 위해, Server는 Client 마다 고유한 Cookie를 발급하고, Client는 Server에 요청을 보낼 때마다 Cookie를 같이 전송한다. Server는 Request 패킷에 들어있는 Cookie 를 통해 Client의 정보와 상태를 기록한다. Cookie 는 key-value 로 구성된 파일이며, Client 에 저장된다. Cookie의 단점 4KB의 크기 제한 쿠키로 인해 웹의 반응성이 느려질 수 있음 도메인 내의 모든 페이지가 같은 쿠키를 전달 받음 HTTP 프로토콜로 Cookie 요청시 암호화 되지 않아 보안이 취약함 쿠키는 사용자의 로컬에 텍스트로 저장 되어있어 쉽게 내용 확인이 가능함 악의적인 Client 가 Cookie 를 변조할 수 있음 Modern Storage APIs Cookie 의 단점을 해결하기 위해 사용되는 방법이다.</description>
    </item>
    
    <item>
      <title>Web</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/web/</link>
      <pubDate>Thu, 06 Mar 2025 22:46:50 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/web/</guid>
      <description>Web HTTP를 이용하여 정보를 공유하는 인터넷 기반 서비스를 Web이라 한다. 정보 제공자를 Web Server, 정보 수신자를 Web Client라 칭한다. 현재의 웹은 단순 정보 제공을 떠나 서비스를 제공하는 형태로 발전하고 있으며, Front end 와 Back end 로 역할이 나뉘어지고 있다. Front end : Web resource로 구성된 사용자에게 직접 보여지는 부분 Back end : 사용자에게 직접 보여지지는 않지만 서비스 제공을 위해 구동되는 부분 Web Resource 웹에 갖춰진 정보 자산을 의미하며, 사용자에게 제공되어 화면을 구성하는데 사용된다.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/http/</link>
      <pubDate>Thu, 06 Mar 2025 20:17:24 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/http/</guid>
      <description>HTTP(Hyper Text Transfer Protocol) 서버와 클라이언트의 데이터 교환을 요청(Request)과 응답(Response) 형식으로 정의한 프로토콜로, 웹 서비스의 근간이 되는 텍스트 교환 프로토콜이다. 주로 클라이언트가 요청을 하면 서버가 응답을 해 주는 방식이며, 서버는 클라이언트의 요청을 받기 위해 socket 통신으로 80번 (혹은 8080번) 포트를 상시 열어놓고 대기한다. HTTP 프로토콜은 ISO 7계층 중 Application layer에 해당하며, transport layer 에 TCP 프로토콜을 사용할 떄 80번 포트를 HTTP 프로토콜 용으로 할당받는다. 0 ~ 1023 번 까지 port는 well-known 포트로, 시스템 혹은 네트워크에서 공공연히 사용되는 프로토콜들의 포트들이 할당되어 있고, HTTP 프로토콜도 그 중 하나이다.</description>
    </item>
    
  </channel>
</rss>
