<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithm on AswinBlue</title>
    <link>https://aswinblue.github.io/Blog/post/algorithm/</link>
    <description>Recent content in Algorithm on AswinBlue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Jul 2023 09:21:30 +0900</lastBuildDate><atom:link href="https://aswinblue.github.io/Blog/post/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm</title>
      <link>https://aswinblue.github.io/Blog/post/algorithm/algorithm/</link>
      <pubDate>Sun, 24 Apr 2022 18:16:23 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/algorithm/algorithm/</guid>
      <description>&lt;h1 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h1&gt;
&lt;h2 id=&#34;그래프-탐색&#34;&gt;그래프 탐색&lt;/h2&gt;
&lt;h3 id=&#34;spshortest-path&#34;&gt;SP(Shortest Path)&lt;/h3&gt;
&lt;p&gt;단일 출발점에서 단일 목적지까지 최단 경로를 찾는 알고리즘&lt;/p&gt;
&lt;h4 id=&#34;dfs&#34;&gt;DFS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;용도 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;경로가 있는지 확인할 때 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;자로구조 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;stack&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;방법 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;시작 node를 stack에 넣는다.&lt;/li&gt;
&lt;li&gt;stack이 모두 빌때까지 아래 동작을 반복한다.&lt;/li&gt;
&lt;li&gt;stack의 top을 현재 node로 설정한다.&lt;/li&gt;
&lt;li&gt;현재 node를 &amp;lsquo;visited&amp;rsquo; 처리하고 stack에서 제거한다.&lt;/li&gt;
&lt;li&gt;다음으로 이동할 node가 있는지 확인한다.&lt;/li&gt;
&lt;li&gt;다음으로 이동할 node &amp;lsquo;A&amp;rsquo;가 있다면, 현재 node에서 그다음에 탐색할 방향을 stack에 push하고, node &amp;lsquo;A&amp;rsquo;도 stack에 push한다.&lt;/li&gt;
&lt;li&gt;더이상 갈 곳이 없으면 현재 node의 visited 처리를 복원한다.&lt;/li&gt;
&lt;li&gt;최종 목적지에 도달한 경우를 모아 결과값을 비교한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;예시 :&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;bfs&#34;&gt;BFS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;용도 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;최단경로 탐색에 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;자로구조 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;queue&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;방법 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;시작 node를 queue에 넣는다.&lt;/li&gt;
&lt;li&gt;queue가 비거나 목적지에 도달할 때 까지 아래 동작을 반복한다.&lt;/li&gt;
&lt;li&gt;queue의 front를 pop 하여 현재 node로 설정한다.&lt;/li&gt;
&lt;li&gt;현재 node에서 이동 가능한 node가 있는지 확인하고, 이동 가능하다면 모두 queue에 push한다.&lt;/li&gt;
&lt;li&gt;queue에 push하면서 해당 경로는 &amp;lsquo;visited&amp;rsquo; 처리를 한다.
&lt;ul&gt;
&lt;li&gt;(주의) queue에 넣으면서 visited 처리를 하고, queue에 넣기전에 방문 여부를 판단해야 메모리 부족을 예방할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sssp-single-source-shortest-path&#34;&gt;SSSP (Single Source Shortest Path)&lt;/h3&gt;
&lt;p&gt;단일 출발점에서 모든 node까지 최단 경로를 찾는 알고리즘&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
