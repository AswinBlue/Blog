<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on AswinBlue</title>
    <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on AswinBlue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Jul 2023 20:59:07 +0900</lastBuildDate><atom:link href="https://aswinblue.github.io/Blog/post/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unit Test</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/unit_test/</link>
      <pubDate>Mon, 19 Aug 2024 04:00:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/unit_test/</guid>
      <description>&lt;h1 id=&#34;unit-test&#34;&gt;Unit Test&lt;/h1&gt;
&lt;h2 id=&#34;테스트의-속성&#34;&gt;테스트의 속성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;좋은 단위 테스트를 작성하기 위해서는 아래 세 가지 기준을 만족해야 한다.
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;가독성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3A(Arrange / Act / Assert) 순서대로 test case 코드가 작성되어 있어야 한다.&lt;/li&gt;
&lt;li&gt;test case 가 어떤 동작을 검증하는지 알 수 있어야 한다.
&lt;ul&gt;
&lt;li&gt;test case 의 이름을 명확하게 작성 필요&lt;/li&gt;
&lt;li&gt;최신 test framework (java 에서 사용하는 spock)에서는 자연어로 test case 이름을 작성할 수 있도록 지원하는 경우도 있다. (google test 는 미지원)&lt;/li&gt;
&lt;li&gt;test case 실행 시 printf 문을 한 번 출력 하도록 규칙을 정하여 사용할 수 있다.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define SPEC(msg) printf(&amp;#34;[SPEC] %s\n&amp;#34;, msg)
TEST(SampleTestCase, SampleTest) {
    SPEC(&amp;#34;이 테스트는 무엇을 하는 테스트 입니다&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;코드를 보지 않고 오류의 원인을 알 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;자연여와 가깝게 테스트 코드를 표현하는 것이 유리하다.
&lt;ul&gt;
&lt;li&gt;함수 이름을 자연어로 상세히 지정&lt;/li&gt;
&lt;li&gt;에러 메시지를 자연어로 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유지보수성&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Make</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/make/</link>
      <pubDate>Thu, 13 Jul 2023 18:35:05 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/make/</guid>
      <description>&lt;h1 id=&#34;make&#34;&gt;make&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;분할 컴파일을 통해 컴파일 작업 효율을 올리고, 이 과정을 자동화 하기 위해 일괄처리를 도와주는 도구이다.&lt;/li&gt;
&lt;li&gt;batch 파일로 컴파일 하면, 변경점을 감지하지 못해 batch파일을 수정하지 않고서는 분할 컴파일을 수행할 수 없다.&lt;/li&gt;
&lt;li&gt;make파일은 파일들 간의 의존성을 정의하여, 특정 파일이 수정되면 어떤 파일을 컴파일 해야하는지 알아서 판단해 준다.&lt;/li&gt;
&lt;li&gt;리눅스 시스템의 수정 시간을 확인하여, 빌드 결과물이 생성된 시간과 소스가 수정된 시간을 비교해서 컴파일 혹은 링킹이 다시 필요한지 판단하는 원리이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;기본구조&#34;&gt;기본구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;파일 이름은 &lt;code&gt;Makefile&lt;/code&gt; 으로 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TARGET:DEPENDENCIES
   COMMANDS
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;COMMANDS 앞에는 공백이 아니라 &lt;strong&gt;tab문자&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;COMMAND를 실행하여 TARGET파일 생성한다는 의미이다.&lt;/li&gt;
&lt;li&gt;TARGET을 생성할 때 DEPENDENCIES 파일들이 필요하다. DEPENDENCIES파일이 수정되면 TARGET파일도 다시 컴파일 해야한다는 의미이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# 주석&lt;/code&gt; : 주석은 #으로 달 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;    @COMMANDS&lt;/code&gt;: make파일은 실행시 &amp;lsquo;실행한 명령 원문&amp;rsquo; 과 &amp;lsquo;실행 결과&amp;rsquo; 를 모두 쉘이 출력한다. &lt;code&gt;@&lt;/code&gt;를 붙이면 명령 원문은 출력하지 않는다.&lt;/li&gt;
&lt;li&gt;기본 형태를 약간 변형하여 명령어를 생성할 수도 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt; 를 없이 &lt;code&gt;TARGET&lt;/code&gt; 과 &lt;code&gt;COMMANDS&lt;/code&gt; 만 남기면, &lt;code&gt;make TARGET&lt;/code&gt; 명령을 입력시 해당 &lt;code&gt;COMMANDS&lt;/code&gt; 만 수행되도록 할 수 있다.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;clean:
    rm -f ${OBJ}${TARGET}
    # make clean 명령시 위 동작 수행

install:
    ...
    # 동일한 형태로 다른 명령도 작성 가능
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;make-파일-정의-commands&#34;&gt;make 파일 정의 COMMANDS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;대부분의 명령들은 쉘 명령과 유사하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo &amp;lt;VALUE&amp;gt;&lt;/code&gt; : VALUE 값을 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VARIABLE = VALUE&lt;/code&gt; : VARIABLE 이라는 이름의 변수를 선언하고, VALUE 값을 대입함
&lt;ul&gt;
&lt;li&gt;변수 선언시 자기 자신을 참조하는 형태(recursive)는 &lt;code&gt;=&lt;/code&gt; 연산자로 사용 불가능하다. (ex: &lt;code&gt;VARIABLE = ${VARIABLE} + DATA&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;대신 &lt;code&gt;:=&lt;/code&gt; 연산과 &lt;code&gt;+=&lt;/code&gt; 연산을 사용 가능하다.&lt;/li&gt;
&lt;li&gt;ex) &lt;code&gt;VARIABLE := ${VARIABLE} + DATA&lt;/code&gt;, &lt;code&gt;VARIABLE += DATA&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(VARIABLE)&lt;/code&gt; : VARIABLE 변수에 해당하는 값을 호출 (&lt;code&gt;${VARIABLE}&lt;/code&gt; 과 동일)
&lt;ul&gt;
&lt;li&gt;TIP: 컴파일 도구를 변수로 지정해 놓으면 좋다. &lt;code&gt;CC=gcc&lt;/code&gt; -&amp;gt; &lt;code&gt;$(CC) -c file.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TIP: 최종 파일 이름을 변수로 지정해 놓으면 좋다. &lt;code&gt;PROJECT_NAME=myProject&lt;/code&gt; -&amp;gt; &lt;code&gt;gcc -o $(PROJECT_NAME) file1.o file2.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TIP: .o파일을 만드는 &lt;code&gt;-c&lt;/code&gt; 옵션을 &lt;code&gt;CFLAGS&lt;/code&gt; 로 변수로 사용하면 좋다. &lt;br&gt;
-&amp;gt; &lt;code&gt;CFLAGS = -I./include -c&lt;/code&gt; 와 같이 include path 및 기타 설정이 가능하다.&lt;/li&gt;
&lt;li&gt;TIP: 링킹을 위한 &lt;code&gt;LFLAGS&lt;/code&gt; 또한 같은 맥락에서 변수로 활용하면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${VARIABLE:ASIS=TOBE}&lt;/code&gt; : VALUE 변수에서 ASIS라는 구문을 TOBE라는 구문으로 치환한다. (ex: &lt;code&gt;PROJECT_NAME:my=your&lt;/code&gt;-&amp;gt; ${PROJECT_NAME} == yourProject)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;내장-매크로&#34;&gt;내장 매크로&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;make 파일의 target-dependency-command 라인들에 일일이 파일 이름을 써 넣고 수정하기 번거롭기에, 아래와 같이 매크로를 활용해 좀더 편리하게 작업을 수행할 수 있도록 한다.
&lt;ul&gt;
&lt;li&gt;내장 매크로를 활용하면 command에 파일 이름을 직접쓰지 않아도 되게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt; : DEPENDENCIES 중 가장 선두&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$^&lt;/code&gt; : DEPENDENCIES 전체를 의미&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt; : TARGET을 의미&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$*&lt;/code&gt; : 확장자가 없는 TARGET을 의미&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$?&lt;/code&gt; : DEPENDENCIES 중 TARGET보다 수정 시간이 늦은 파일들&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.c.o:&lt;/code&gt; : Makefile 안에서 언급된 모든 xxx.o 파일을 만들기 위해 동일한 이름을 가진 xxx.c 파일들을 컴파일하여 xxx.o 파일을 생성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%.o : %.c&lt;/code&gt; : &lt;code&gt;.c.o&lt;/code&gt; 와 동일한 효과를 낸다. 좀더 신규 스타일이다.&lt;/li&gt;
&lt;li&gt;최종 예시를 보면 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CC = gcc
CFLAGS = -c
TARGET = a.out
OBJ = main.o func1.o

${TARGET} : ${OBJ}
    ${CC} ${OBJ} -o ${TARGET}  # gcc main.o func1.o -o a.out 와 동일

.c.o :  # 위에서 언급된 모든 .o 파일(OBJ)을 만들기 위해 .c 파일로 .o 파일 생성
    ${CC} ${CFLAGS} $&amp;lt;  # $&amp;lt;는 가장 선두의 dependency를 의미함. 즉 gcc -c xxx.c 와 동일
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;쉘-명령어&#34;&gt;쉘 명령어&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt; : 현재 경로에 있는 &lt;code&gt;Makefile&lt;/code&gt; 을 실행한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt; : 해당 경로의 소스를 컴파일하여 /usr/local/lib, /usr/local/bin 폴더로 .so파일과 .bin파일 복사&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -f &amp;lt;FILE_NAME&amp;gt;&lt;/code&gt; : Makefile 대신 FILE_NAME 을 make파일로 가정하고 실행한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -p&lt;/code&gt; : 설정된 매크로 옵션들을 확인 가능&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Gcc</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gcc/</link>
      <pubDate>Mon, 10 Jul 2023 22:13:06 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gcc/</guid>
      <description>&lt;h1 id=&#34;gcc&#34;&gt;GCC&lt;/h1&gt;
&lt;p&gt;C / C++ 언어를 컴파일 해 주는 도구이다. 리눅스에서는 apt 명령으로 설치 가능하며, 윈도우에서는 Mingw을 이용하여 설치 가능하다.
gcc는 컴파일러를 포함한 패키지일 뿐, 내부적인 컴파일러는 따로 있다. (cc1 등)&lt;/p&gt;
&lt;h2 id=&#34;gcc-컴파일-동작-순서&#34;&gt;GCC 컴파일 동작 순서&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gcc main.c&lt;/code&gt; 파일을 동작시키면 main.c파일을 컴파일하여 실행파일인 a.out 파일을 생성하게 된다.&lt;br&gt;
하지만 내부적으로는 아래와 같은 과정을 거치게 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;전처리 : c언어로 구현된 .c 파일을 전처리가 완료된 .i 파일로 변환한다.&lt;br&gt;
&lt;code&gt;gcc -E main.c -o a.i&lt;/code&gt; : main.c 파일을 a.i 파일로 전처리&lt;/li&gt;
&lt;li&gt;컴파일 : 전처리된 .i 파일을 어셈블리어로 변환&lt;br&gt;
&lt;code&gt;gcc -S a.i -o a.s&lt;/code&gt; : a.i 파일을 a.s 어셈블리어로 어셈블&lt;/li&gt;
&lt;li&gt;어셈블: 각 벤더들이 만든 어셈블리어를 목적파일로 변환(어셈블리 언어를 기계어로 변환)
&lt;code&gt;gcc -c a.s -o a.o&lt;/code&gt; : 어셈블리 파일을 목적 파일 EOL(Executable Linux File)로 변환. 하지만 바로 실행할 수는 없다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file a.o&lt;/code&gt; 명령어를 입력 해 보면 &amp;ldquo;LSB relocatable&amp;rdquo; 이라고 표시된다. 즉, 재배치 가능하다는 의미로, 실행 할 수 있는 상태는 아니라는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;링킹: 목적파일에서 참조하는 다른 목적파일들을 linking하여 최종 실행파일을 생성한다.&lt;br&gt;
&lt;code&gt;gcc a.o -o out&lt;/code&gt; : a.o 목적파일로 실행 가능한 파일을 생성한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file out&lt;/code&gt; 명령어를 입력 해 보면 &amp;ldquo;LBS executable&amp;rdquo; 라고 출력된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc -v --save-temps -o out&lt;/code&gt; : 위 전체 과정을 실행하며 중간 생성물을 남기고, 실행 결과도 출력&lt;/li&gt;
&lt;li&gt;리눅스에서 &lt;code&gt;ldd&lt;/code&gt; 명령으로 링킹시 라이브러리 의존성을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;ASLR을 지원하는 커널의 경우, &lt;code&gt;-no-pie&lt;/code&gt; 옵션을 넣으면 PIE( position independent executable) 영역을 생성하지 않아 ASLR 기능을 끌 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;라이브러리&#34;&gt;라이브러리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;헤더파일에서 include를 하여 사용할 수 있는 목적파일을 라이브러리라고 칭한다.
&lt;ul&gt;
&lt;li&gt;라이브러리는 링킹을 통해 프로그램에 포함되며, 링킹 방식에 따라 &amp;lsquo;정적 라이브러리&amp;rsquo;와 &amp;lsquo;동적 라이브러리&amp;rsquo;로 분류된다.&lt;/li&gt;
&lt;li&gt;정적 라이브러리는 정적 링킹에 의해 생성되며, 라이브러리가 코드의 object 파일이 자체에 포함되는 형태이다.
&lt;ul&gt;
&lt;li&gt;정적 라이브러리는 파일의 크기가 커지고, 라이브러리 버전 변경시 파일이 매번 변경되어야 하는 단점이 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc -static&lt;/code&gt; 와 같이 static 옵션을 넣어 설정 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동적 라이브러리는 동적 링킹에 의해 생성되며, 라이브러리 코드의 object 파일이 별도로 존재하고, 링커가 라이브러리 코드의 주소를  사용자의 코드와 연결시켜주는 형태이다.
&lt;ul&gt;
&lt;li&gt;빌드시 별도 옵션을 넣지 않으면 dynamic linking 으로 동작한다.&lt;/li&gt;
&lt;li&gt;동적 할당을 수행하면 각 프로세스는 외부 라이브러리 코드의 함수를 PLT(Procedure Linkage Table) 와 GOT(Global Offsets Table)를 통해 접근하게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C에서 라이브러리 파일은 &lt;code&gt;lib&lt;/code&gt; 으로 시작하는 규칙을 지니며 &lt;code&gt;.a&lt;/code&gt; 확장자를 가진다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc -c CFILE.c -o OBJ.o&lt;/code&gt; 명령으로 &lt;code&gt;OBJ.o&lt;/code&gt; 목적파일을 생성했다면, &lt;code&gt;ar rcv libmylib.a OBJ.o&lt;/code&gt; 명령으로 &lt;code&gt;libmylib.a&lt;/code&gt;라는 사용자 정의 라이브러리/정적 라이브러리를 생성 가능하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ar t libmylib.a&lt;/code&gt; 로 라이브러리가 가리키는 파일을 검색하면 &lt;code&gt;OBJ.j&lt;/code&gt; 파일을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;라이브러리를 함께 컴파일 할 때 &lt;code&gt;gcc main.c libmylib.a&lt;/code&gt; 와 같이 컴파일 할 수도 있지만, 라이브러리를 제대로 활용하는 방법은 &lt;code&gt;gcc main.c -lmylib&lt;/code&gt; 와 같이 &lt;code&gt;-l&lt;/code&gt; 옵션을 이용한다.
&lt;blockquote&gt;
&lt;p&gt;정적 라이브러리 이름에서 앞쪽의 lib 부분과 뒤쪽의 .a 부분을 제외한 부분이 라이브러리 이름이다.
위 예시에서는 &lt;code&gt;mylib&lt;/code&gt;이 라이브러리 이름이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;_stl</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;_stl/</link>
      <pubDate>Tue, 12 Apr 2022 19:17:21 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;_stl/</guid>
      <description>&lt;h1 id=&#34;c-stl&#34;&gt;C++ STL&lt;/h1&gt;
&lt;h2 id=&#34;자료구조&#34;&gt;자료구조&lt;/h2&gt;
&lt;h3 id=&#34;map&#34;&gt;map&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;key-value 쌍으로 이루어진 tree형태의 자료구조&lt;/li&gt;
&lt;li&gt;중복을 허용하지 않음&lt;/li&gt;
&lt;li&gt;C++에서는 red black tree로 구현되어 삽입,삭제가 O(log n) 안에 이루어진다.&lt;/li&gt;
&lt;li&gt;내부적으로 key를 기준으로 오름차순으로 자료를 정렬한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;헤더 :  &lt;code&gt;#include &amp;lt;map&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;선언 : &lt;code&gt;map&amp;lt;int, int&amp;gt; map1;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;내림차순으로 선언 : &lt;code&gt;map &amp;lt;int, int, greater&amp;gt; map2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;삽입 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;insert : &lt;code&gt;map1.insert({&amp;quot;key&amp;quot;,VALUE})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[] : &lt;code&gt;map1[&amp;quot;key&amp;quot;] = VALUE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;삭제 :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;특정 index : &lt;code&gt;map1.erase(map1.begin()+2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;특정 key : &lt;code&gt;map1.erase(KEY)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;구간 : &lt;code&gt;map1.erase(map1.begin(), map1.end())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;전체 : &lt;code&gt;map1.clear()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;검색 :&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;map&amp;lt;int, int&amp;gt;::Iterator res;

if ((res = map1.find(KEY)) != m.end()) {
  res -&amp;gt; first; // key
  res -&amp;gt; second; // value
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;반복문 :&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for (auto itr = map1.begin(); itr != map1.end(); itr++) {
  itr-&amp;gt;first // key
  itr-&amp;gt;second // value
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;hash-map&#34;&gt;hash map&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hash table을 이용한 자료구조&lt;/li&gt;
&lt;li&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;정렬이 필요없는 비순차적 구조&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;헤더 : &lt;code&gt;#include&amp;lt;hash_map&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GDB</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gdb/</link>
      <pubDate>Mon, 23 Aug 2021 18:49:15 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gdb/</guid>
      <description>&lt;h1 id=&#34;gdb&#34;&gt;GDB&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GNU Debugger의 약자&lt;/li&gt;
&lt;li&gt;유닉스의 디버거는 오픈소스가 아니라 GNU에서 새로 개발한 디버거&lt;/li&gt;
&lt;li&gt;디버깅을 위해서는 register(레지스터 값), disassem(rip 부근 주소를 디스어셈 한 값), stack(스택의 값), backtrace(현재 rip에 도달 할 때 까지 거쳐간 함수들) 을 파악해야 하며, 이를 context(맥락) 이라 한다.&lt;/li&gt;
&lt;li&gt;pwndbg 플러그인을 설치하면 hacking에 관련된 내용을 디버깅하기 용이하다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://github.com/pwndbg/pwndbg&lt;/code&gt; 주소에서 git을 clone 받고, ./setup.sh를 실행시키면 이후 &lt;code&gt;gdb&lt;/code&gt; 명령을 칠 때 자동으로 pwndbg 플러그인이 적용된 gdb가 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;컴파일&#34;&gt;컴파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gcc로 컴파일시 옵션에 &lt;code&gt;-g&lt;/code&gt; 를 붙여야 소스를 보면서 디버깅이 가능&lt;/li&gt;
&lt;li&gt;리눅스에서 컴파일한 파일은 ELF (Executable and Linkable Format) 의 실행 파일이 된다.
&lt;ul&gt;
&lt;li&gt;ELF 파일은 파일 실행에 필요한 정보가 든 헤더와 여러 섹션들로 구성된다.&lt;/li&gt;
&lt;li&gt;섹션에는 기계어 코드 등의 정보들이 들어있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readelf -h [ELF파일]&lt;/code&gt; 명령으로 ELF 파일의 헤더 정보를 확인 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gdb-옵션&#34;&gt;gdb 옵션&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gdb [파일이름]&lt;/code&gt; : 해당 파일이름 디버깅 실행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--args [arg1] [arg2] [...]&lt;/code&gt; : 파일 실행에 필요한 argument를 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;기타-명령어&#34;&gt;기타 명령어&lt;/h2&gt;
&lt;h3 id=&#34;실행-전-설정사항&#34;&gt;실행 전 설정사항&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;coredumb 파일&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; basic</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;/</guid>
      <description>&lt;h1 id=&#34;c-basics&#34;&gt;C++ basics&lt;/h1&gt;
&lt;h2 id=&#34;매크로&#34;&gt;매크로&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#define MACRO 1&lt;/code&gt; : MACRO 값으로 1을 지정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#undef MACRO&lt;/code&gt; : MACRO값에 지정된 내용 해제&lt;/li&gt;
&lt;li&gt;여러줄의 매크로 값 지정 :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define PRINT(X) printf(&amp;#34;%d&amp;#34;, X);\
  printf(&amp;#34;%d&amp;#34;, (X) + 1);\
  printf(&amp;#34;%d&amp;#34;, (X) + 2);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;매크로 합성 :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define A 1
#define B 1
#define C A##B // A##B = 12
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;함수형태 매크로 작성 :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 일반함수에는 &amp;#39;;&amp;#39; 를 붙이지만 매크로 함수에는 &amp;#39;;&amp;#39;를 붙일 필요가 없다.
// 일관성을 갖기 위해 do-while문 안에 작성하면 매크로 함수에도 &amp;#39;;&amp;#39;를 붙이도록 할 수 있다.
#define FUNC(a, b) do { \
    a = b * 2;\
} while (0)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;연산자 우선순 :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 매크로 함수는 계산 전 치환을 먼저 수행한다. 연산자 우선순위에 주의한다.
#define ADD1(a,b) a+b
#define ADD2(a,b) (a+b)
#define MULT(a,b) a*b
#define MULT2(a,b) (a)*(b)
...
printf(&amp;#34;%d&amp;#34;,ADD1(3,4) * 2) // 예상값 (3 + 4) * 2 = 14
// 3 + 4 * 2 로 치환하여 계산되어 실제 결과는 11
// ADD2 처럼 계산 결과를 괄호로 묶어야 안전하다.

printf(&amp;#34;%d&amp;#34;,MULT(2+2,3+3)) // 예상값 (4 * 6) * 2 = 26
// (2 + 2 * 3 + 3) 로 치환하여 계산되어 실제 결과는 11
// MULT2 처럼 각 변수를 괄호로 묶어야 안전하다.

// ADD1, MULT2 경우를 종합하여 아래와 같이 사용하자
#define ADD3(a,b) ((a) + (b))
#define MULT3(a,b) ((a) * (b))
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;조건부 컴파일
&lt;ul&gt;
&lt;li&gt;if-elif-else 사용 가능&lt;/li&gt;
&lt;li&gt;조건에 !, &amp;amp;&amp;amp; || 논리연산 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define MACRO
#define DEBUG 1

#ifdef MACRO // 정의가 되어있으면 수행
#endif

#if DEBUG // DEBUG가 나타내는 값 또는 식이 참이면 수행
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;파일 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;FILE_NAME&amp;gt; // 표준라이브러리에서 파일 참조
#include &amp;#34;FILE_NAME&amp;#34; // 현재 경로 기준 파일 참조
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;→ [&lt;em&gt;활용&lt;/em&gt;]: 헤더파일 중복 참조 방지법&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/cmake/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/cmake/</guid>
      <description>&lt;h1 id=&#34;cmake&#34;&gt;CMake&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cmake란 : C,C++ 언어 컴파일시 make 툴을 이용할 때, 규모가 큰 프로젝트에서 컴파일 의존성 관리를 쉽게 하기 위한 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;명령어&#34;&gt;명령어&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmake CMakeList.txt&lt;/code&gt; : CMakeList.txt파일 안의 내용을 수행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmake .&lt;/code&gt; : 파일 경로를 입력하면 해당 경로에서 CMakeList.txt파일을 찾아서 수행.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; : cmake를 이용해 생성한 파일들을 이용해 make로 컴파일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmake 명령 후 make를 이용해 컴파일을 수행하면 부산물들이 많이 생성된다. 이를 방지하기 위해 보통 새로운 폴더를 만들어 넣어서 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. mkdir build
2. vi CMakeList.txt 후 내용 작성
3. cd build
4. cmake ..
5. make
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;CmakeLists.txt 작성은 쉘 프로그래밍과 유사하다. cmake 문법을 사용하여 작성해 주면 된다. 미리 지정된 변수들도 있는데, 해당 변수들에 주의하며 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;문법&#34;&gt;문법&lt;/h2&gt;
&lt;h3 id=&#34;빌드-설정&#34;&gt;빌드 설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ADD_EXECUTABLE&lt;/code&gt; : 실행파일 생성
ex) &lt;code&gt;ADD_EXECUTABLE(main.exe main.cpp function.cpp)&lt;/code&gt; : main.cpp와 function.cpp를 사용해 main.exe를 생성한다. 헤더 파일은 자동으로 적용된다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Json in C&#43;&#43;</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/json_c&#43;&#43;/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/json_c&#43;&#43;/</guid>
      <description>&lt;h1 id=&#34;json-library-in-c&#34;&gt;Json library in C++&lt;/h1&gt;
&lt;h2 id=&#34;rapid-json&#34;&gt;Rapid Json&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;커뮤니티&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;오픈소스로 다양한 예제코드를 찾을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;parsing 속도&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;다른 Json 파싱 라이브러리와 비교시 상위권에 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;라이브러리&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;헤더 온리 사용이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참조&#34;&gt;참조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://joycecoder.tistory.com/9&#34;&gt;https://joycecoder.tistory.com/9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/rapidjson/&#34;&gt;https://github.com/Tencent/rapidjson/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>spdlog C&#43;&#43;</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/log_c&#43;&#43;/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/log_c&#43;&#43;/</guid>
      <description>&lt;h1 id=&#34;spdlog&#34;&gt;spdlog&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;C++ 프로젝트에서 로그를 세팅할 수 있는 라이브러리&lt;/li&gt;
&lt;li&gt;fast, header only, no dependency, .. 등 장점&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://isocpp.org/blog/2014/11/spdlog&#34;&gt;https://isocpp.org/blog/2014/11/spdlog&lt;/a&gt;
&lt;a href=&#34;https://github.com/gabime/spdlog&#34;&gt;https://github.com/gabime/spdlog&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
