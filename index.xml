<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AswinBlue</title>
    <link>https://aswinblue.github.io/Blog/</link>
    <description>Recent content on AswinBlue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://aswinblue.github.io/Blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Database</title>
      <link>https://aswinblue.github.io/Blog/post/databases/database/</link>
      <pubDate>Thu, 20 Mar 2025 22:03:29 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/databases/database/</guid>
      <description>Database 데이터를 효율적으로 저장하여 관리하는 시스템을 Database라고 한다. Database 를 체계적으로 조작하기 위해서 DBMS(DataBase Management System) 을 사용한다. Database는 형태에 따라 크게 Relational Database (관계형 DB), Non-Relational Database(비관계형 DB) 로 분류된다. Relational Database : 테이블 형태로 데이터를 관리 Non-Relational Database : key-value 세트로 구성된 형태로 데이터를 관리(ex: json format) RDBMS (Relational Database Management System) Relational Database 조작을 위한 시스템을 의미한다. Codds 에서 정의한 12가지 정의에 따르도록 설계된다. (보통은 선두의 2가지 규칙만 필수로 따른다.</description>
    </item>
    
    <item>
      <title>Exploit</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/exploit/</link>
      <pubDate>Tue, 11 Mar 2025 20:54:59 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/exploit/</guid>
      <description>공격 방법 분류 Server side 공격 방법 Injection (인젝션) 서버의 처리 과정 중 사용자가 입력한 데이터가 시스템의 다른 기능을 주거나 문법적으로 사용되어 발생하는 취약점 injection 공격의 종류 SQL Injection Command Injection SSTI (Server Side Template Injection) Path Traversal SSRF (Server Side Request Forgery) ORM과 같이 검증된 SQL 라이브러리를 사용하여 방어가 필요하다. File vulnerability 서버의 파일 시스템에 사용자가 원하는 행위를 할 수 있을 때 발생하는 취약점 system(PHP), child_process(Node JS), os.system(Python) 등 OS command를 실행하는 함수를 호출하지 않는 방법이 가장 좋으나, 입력 필터링이나 대체 라이브러리를 사용하는 방법으로 위협을 줄일 수 있다.</description>
    </item>
    
    <item>
      <title>Youtube Downloader</title>
      <link>https://aswinblue.github.io/Blog/post/projects/youtube_downloader/</link>
      <pubDate>Sun, 09 Mar 2025 20:40:01 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/projects/youtube_downloader/</guid>
      <description>Youtoube Download Window OS에서 Python으로 Youtube 영상을 다운로드 하는 방법
1. Python Code 작성 yt-dlp 패키지를 다운받는다. pip install yt-dlp 명령으로 손쉽게 다운로드 가능하다. github 주소는 다음과 같다. : https://github.com/yt-dlp/yt-dlp 코드를 작성한다. 아래는 샘플 코드이다.
import yt_dlp import os import time ########## # 설정 ########## # 최대 재시도 횟수 MAX_RETRIES = 3 # 재시도 사이의 대기 시간 (초) RETRY_DELAY = 5 # 다운로드 리스트 download_lists = [ { &amp;#34;name&amp;#34;: &amp;#39;FOLDER_NAME&amp;#39;, # 다운로드 받을 폴더 이름 &amp;#34;url&amp;#34;: &amp;#39;https://www.</description>
    </item>
    
    <item>
      <title>Cookie</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/cookie/</link>
      <pubDate>Sun, 09 Mar 2025 16:10:13 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/cookie/</guid>
      <description>Cookie HTTP의 특징(Connectionless, Stateless) 때문에 Web Server 는 HTTP로 요청된 패킷들이 어떤 Web Client에서 전달된 것인지 구분할 수 없다. IP 주소와 User-Agent 등의 정보는 매번 변경될 수 있다. Client의 정보와 요청의 내용을 구체화하기 위해, Server는 Client 마다 고유한 Cookie를 발급하고, Client는 Server에 요청을 보낼 때마다 Cookie를 같이 전송한다. Server는 Request 패킷에 들어있는 Cookie 를 통해 Client의 정보와 상태를 기록한다. Cookie 는 key-value 로 구성된 파일이며, Client 에 저장된다. Cookie의 단점 4KB의 크기 제한 쿠키로 인해 웹의 반응성이 느려질 수 있음 도메인 내의 모든 페이지가 같은 쿠키를 전달 받음 HTTP 프로토콜로 Cookie 요청시 암호화 되지 않아 보안이 취약함 쿠키는 사용자의 로컬에 텍스트로 저장 되어있어 쉽게 내용 확인이 가능함 악의적인 Client 가 Cookie 를 변조할 수 있음 Modern Storage APIs Cookie 의 단점을 해결하기 위해 사용되는 방법이다.</description>
    </item>
    
    <item>
      <title>Web</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/web/</link>
      <pubDate>Thu, 06 Mar 2025 22:46:50 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/web/</guid>
      <description>Web HTTP를 이용하여 정보를 공유하는 인터넷 기반 서비스를 Web이라 한다. 정보 제공자를 Web Server, 정보 수신자를 Web Client라 칭한다. 현재의 웹은 단순 정보 제공을 떠나 서비스를 제공하는 형태로 발전하고 있으며, Front end 와 Back end 로 역할이 나뉘어지고 있다. Front end : Web resource로 구성된 사용자에게 직접 보여지는 부분 Back end : 사용자에게 직접 보여지지는 않지만 서비스 제공을 위해 구동되는 부분 Web Resource 웹에 갖춰진 정보 자산을 의미하며, 사용자에게 제공되어 화면을 구성하는데 사용된다.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://aswinblue.github.io/Blog/post/webhacking/http/</link>
      <pubDate>Thu, 06 Mar 2025 20:17:24 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webhacking/http/</guid>
      <description>HTTP(Hyper Text Transfer Protocol) 서버와 클라이언트의 데이터 교환을 요청(Request)과 응답(Response) 형식으로 정의한 프로토콜로, 웹 서비스의 근간이 되는 텍스트 교환 프로토콜이다. 주로 클라이언트가 요청을 하면 서버가 응답을 해 주는 방식이며, 서버는 클라이언트의 요청을 받기 위해 socket 통신으로 80번 (혹은 8080번) 포트를 상시 열어놓고 대기한다. HTTP 프로토콜은 ISO 7계층 중 Application layer에 해당하며, transport layer 에 TCP 프로토콜을 사용할 떄 80번 포트를 HTTP 프로토콜 용으로 할당받는다. 0 ~ 1023 번 까지 port는 well-known 포트로, 시스템 혹은 네트워크에서 공공연히 사용되는 프로토콜들의 포트들이 할당되어 있고, HTTP 프로토콜도 그 중 하나이다.</description>
    </item>
    
    <item>
      <title>Unit Test</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/unit_test/</link>
      <pubDate>Mon, 19 Aug 2024 04:00:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/unit_test/</guid>
      <description>Unit Test 테스트의 속성 좋은 단위 테스트를 작성하기 위해서는 아래 세 가지 기준을 만족해야 한다. 가독성
3A(Arrange / Act / Assert) 순서대로 test case 코드가 작성되어 있어야 한다. test case 가 어떤 동작을 검증하는지 알 수 있어야 한다. test case 의 이름을 명확하게 작성 필요 최신 test framework (java 에서 사용하는 spock)에서는 자연어로 test case 이름을 작성할 수 있도록 지원하는 경우도 있다. (google test 는 미지원) test case 실행 시 printf 문을 한 번 출력 하도록 규칙을 정하여 사용할 수 있다.</description>
    </item>
    
    <item>
      <title>Window_programming</title>
      <link>https://aswinblue.github.io/Blog/post/windowapp/window_programming/</link>
      <pubDate>Sun, 12 May 2024 16:02:25 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/windowapp/window_programming/</guid>
      <description>Window Programming PE 윈도우는 실행 가능한 목적 파일을 PE 포멧이라 칭한다. (리눅스의 ELF 와 유사) PE 파일은 header 와 section 으로 구성된다. section 에는 이름, 크기, 로드될 주소의 오프셋, 속성과 권한 등의 정보가 들어있다. PE 파일에 들어가야 할 필수 section 은 없지만, &amp;lsquo;.text&amp;rsquo;, &amp;lsquo;.data&amp;rsquo;, &amp;lsquo;.rdata&amp;rsquo; section 이 주로 사용된다. .text: 실행 가능한 기계코드가 위치하는 영역 (읽기, 쓰기 가능) .data: 컴파일 시점에 정해진 전역 변수들이 위치하는 영역 (읽기, 쓰기 가능) .rdata: 컴파일 시점에 값이 정해진 전역 상수와 참조할 DLL 및 외부 함수들의 정보가 위치하는 영역 (읽기만 가능) 윈도우가 실행되면 PE 파일의 데이터들이 메모리에 적재된다.</description>
    </item>
    
    <item>
      <title>Reverse Engineering</title>
      <link>https://aswinblue.github.io/Blog/post/systemhacking/reverse_engineering/</link>
      <pubDate>Sun, 12 May 2024 14:42:07 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/systemhacking/reverse_engineering/</guid>
      <description>Reverse Engineering software 를 분석하여 소스코드를 역으로 생성 해 내는 기법 software 분석 방법 Static analysis 프로그램을 실행시키지 않고 수행하는 분석이다.
프로그램의 전체 구조를 파악하기 쉬우며, 환경적 제약 사항에 자유롭고, 악성 코드의 위협으로부터 안전하다.
난독화 적용시 분석이 어려워 진다는 단점이 있다.
정적분석에 사용되는 툴로는 IDA 가 있다.
IDA 는 프리웨어로 https://hex-rays.com/ida-free/ 에서 다운 가능하다. Dynamic analysis 프로그램을 실행시키며 수행하는 분석이다. 프로그램의 개략적인 동작을 빠르게 확인 할 수 있다. 정적 분석과 반대로 프로그램 실행에 필요한 환경 구성이 어려울 수 있다.</description>
    </item>
    
    <item>
      <title>Exploit</title>
      <link>https://aswinblue.github.io/Blog/post/systemhacking/exploit/</link>
      <pubDate>Mon, 11 Mar 2024 20:46:33 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/systemhacking/exploit/</guid>
      <description>Exploit pwntool의 checksec 명령어로 어떤 보안이 적용되었는지 확인 가능하다. Shell Code exploit은 파일 읽고 쓰기(open-read-write, orw), 셸 명령 실행(execve) 권한을 취득하는 것을 목표로 한다. Shell 권한을 획득하기 위한 어셈블리 코드들의 모음을 &amp;lsquo;Shell Code&amp;rsquo; 라 칭한다. 환경세팅 pwntools checksec shellcraft ROPgadget one_gadget patchelf 취약점 공격 순서 바이너리를 분석하여 보호기법을 확인한다. checksec 명령어를 사용하여 바이너리에 적용된 보호기법을 확인하고, 적용 불가능한 exploit 기법을 추려낸다. checksec 참조 ldd 명령을 활용하여 의존성 관계를 확인한다. ldd 명령 코드를 확인하여 취약점 및 구조(stack 형태)을 파악한다 stack은 함수에서 선언된 순서대로 할당되지 않음에 주의하며, 무조건 assembly어를 통해 stack 주소에서 특정 변수의 위치를 확인하도록 한다.</description>
    </item>
    
    <item>
      <title>Pwntool</title>
      <link>https://aswinblue.github.io/Blog/post/systemhacking/pwntool/</link>
      <pubDate>Sat, 09 Mar 2024 10:09:44 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/systemhacking/pwntool/</guid>
      <description>pwntool 시스템 해킹을 위해 제작된 파이썬 라이브러리 바이너리를 실행하고 특정 input을 집어넣어 해킹(exploit)을 할수 있게 한다. 설치 리눅스의 apt와 파이썬의 pip 명령으로 설치가 가능하다. $ apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential$ python3 -m pip install --upgrade pip$ python3 -m pip install --upgrade pwntools 공식 메뉴얼 docker를 사용한 설치 방법 FROM ubuntu:18.04ENV PATH=&amp;#34;${PATH}:/usr/local/lib/python3.6/dist-packages/bin&amp;#34;ENV LC_CTYPE=C.UTF-8RUN apt updateRUN apt install -y \gcc \git \python3 \python3-pip \ruby \sudo \tmux \vim \wget# install pwndbgWORKDIR /rootRUN git clone https://github.</description>
    </item>
    
    <item>
      <title>Assembly_basic</title>
      <link>https://aswinblue.github.io/Blog/post/assembly/assembly_basic/</link>
      <pubDate>Wed, 21 Feb 2024 20:10:48 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/assembly/assembly_basic/</guid>
      <description>Assembly 기계어로 1대1 대응 가능한 언어로, human readable 한 언어 중 가장 기계어에 가까운 언어이다. 기계어로 컴파일 직전에 어셈블리어로 변환을 거친다. operation code(명령어) 와 operand(피연산자) 로 구성된다. 명령어는 데이터 이동, 산술연산, 논리연산, 비교, 분기, 스택, 프로시저, 시스템콜의 종류가 있다. 피연산자 자리에는 상수(Immediate Value), 레지스터(Register), 메모리(Memory)가 올 수 있다. 숫자를 넣으면 상수이다. [] 로 둘러싸인 숫자는 메모리이다. 메모리 피연산자 앞에는 메모리의 크기를 나타내는 크기 지정자(Size Directive)가 붙을 수 있다. BYTE: 8bit BYTE PTR rax : rax 레지스터의 데이터를 1바이트만큼 참조 WORD: 16bit WORD PTR [0x8048000] : 0x8048000의 데이터를 2바이트만큼 참조 DWORD: 32bit QWORD: 64bit 명령어 mov &amp;ldquo;값&amp;quot;을 레지스터리나 메모리에 저장하는 명령 mov dst, src : src 값을 dst에 덮어씀 mov rdi, rsi : rsi의 값을 rdi에 대입 mov QWORD PTR[rdi], rsi : rsi의 값을 rdi가 가리키는 주소에 대입 mov QWORD PTR[rdi + 8 * rcx], rsi : rsi의 값을 (rdi + 8 * rcx)가 가리키는 주소에 대입 dst = 레지스터, src = 레지스터 : src가 가리키는 주소의 값을 dst가 가리키는 주소의 값에 덮어씀 dst = 메모리, src = 레지스터 : src가 가리키는 주소의 값을 dst가 가리키는 주소의 값에 덮어씀 dst = 레지스터, src = 메모리 : src가 가리키는 주소의 값을 dst가 가리키는 주소의 값에 덮어씀 dst = 메모리, src = 메모리 : 불가능 mov dst, [mem + 4] : mem + 4 주소에 저장된 값을 dst에 덮어씀 dst 값으로는 주소나 포인터가 올 수 있다.</description>
    </item>
    
    <item>
      <title>Delver</title>
      <link>https://aswinblue.github.io/Blog/post/projects/delver/</link>
      <pubDate>Tue, 30 Jan 2024 21:21:43 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/projects/delver/</guid>
      <description>Delver 시작날짜: March 18, 2023
종료날짜: March 28, 2023
목표 python 기반 웹 scrapping 및 결과를 slack 에 전송하는 slack bot
요구사항 AWS lambda를 사용하여 동작 매 시간마다 동작하도록 설정 [Delver]🔨 Web scrapper 작성 1. 구현 내용 beautiful soup를 사용하여 특정 web을 scrap (API 참조: https://beautiful-soup-4.readthedocs.io/en/latest/) 여러 사이트에 호환되도록 구조를 설정
사이트별 속성을 json 형태로 기록
json 형태를 읽어 코드 변경 없이 사이트 추가할 수 있는 구조로 작성
2. 문제와 해결 Beautiful soup를 사용하여 특정 문자 찾기 find() 혹은 find_all() 에 string 인자를 넣어서 검색을 하면 반환 값으로html tag 배열이 아니라, string 배열이 온다.</description>
    </item>
    
    <item>
      <title>FlickThrough</title>
      <link>https://aswinblue.github.io/Blog/post/projects/flick_through/</link>
      <pubDate>Tue, 30 Jan 2024 21:12:32 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/projects/flick_through/</guid>
      <description>Flick Through github: https://github.com/AswinBlue/FlickThrough
Link : aswinblue.github.io/FlickThrough/
시작날짜: August 21, 2023
목표 텍스트 파일을 읽어 단어 단위로 슬라이드 쇼를 수행하는 앱 제작
요구사항 텍스트 파일의 공백과 줄바꿈을 기준으로 단어를 나누고 이를 화면에 출력 출력은 한 단어씩 이루어 지며 분당 300개를 기본으로, 속도는 조절 가능 단어 자르는건 커스텀 가능 특정 문자마다 딜레이 다르게 줄 수 있도록 설정 스크린샷 혹은 클립보드의 내용도 사용할 수 있도록 함 기능 구현 1. 구현 내용 UI 구성 텍스트가 출력될 텍스트박스, 진행률 표시바, 시작/일시정지 버튼, 속도 조절 스크롤바, 파일 읽기 버튼을 구성</description>
    </item>
    
    <item>
      <title>IPC</title>
      <link>https://aswinblue.github.io/Blog/post/linux/ipc/</link>
      <pubDate>Thu, 27 Jul 2023 20:37:08 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/ipc/</guid>
      <description>IPC (Inter Process Communicatrion) Signal Signal은 프로세스간 동기화를 위해 프로세스간 전송하는 신호를 의미한다. Software Interrupt 라고도 한다. 커널에서 kill -&amp;lt;SIGNAL_NUMBER&amp;gt; &amp;lt;PROCESS_ID&amp;gt; 명령으로 특정 PROCESS_ID에 ISGNAL_NUMBER에 해당하는 signal을 전달할 수 있다. signal은 총 64까지 정의되어 있고 1~31까지가 일반적으로 사용하는 signal이다. 34~63은 고성능 네트워크 통신을 위한 시그널이다. (32, 33는 미정의) kill -l 명령으로 signal 리스트를 확인할 수 있다. SIGHUP SIGINT : 인터럽트, Ctrl+C 명령으로 전송 가능 SIGQUIT Coredump시 발생 SIGILL : Illegal instruction SIGTRAP : debugger is tracing SIGABRT : Abort process SIGBUS : bus error SIGFPE : Floating point exception SIGKILL : 강제 종료 SIGUSR1	: User-defined signal 1, 마음대로 사용 가능 SIGSEGV	: invalid virtual memory reference SIGUSR2 : User-defined signal 2, 마음대로 사용 가능 SIGPIPE	: 반대편이 연결되지 않은 pip에 신호 전송시 발생하는 에러 SIGALRM : alarm() 함수에 의해 발생한 시그널 1 SIGTERM : 종료 요청, SIGKILL(9)보다 안전한 종료 방법, SIGINT와 유사한 성능 SIGSTKFLT : Stack fault SIGCHLD : 자식 process가 종료될 때 부모에게 전달하는 신호 SIGCONT : SIGSTOP 에 의해 정지된 경우, 다시 시작하라는 신호 SIGSTOP : process 정지 SIGTSTP : process 일시정지, Ctrl+Z 명령으로 전송 가능 SIGTTIN	: background 에 있을 때 read 요청을 받은 경우 발생 SIGTTOU : background 에 있을 때 write 요청을 받은 경우 발생 SIGURG : 긴급 통신을 받은 경우 (Out Of Band) SIGXCPU : 설정된 CPU 사용량을 초과하여 프로세스가 동작 한 경우 SIGXFSZ : 파일 크기가 허용된 크기를 초과한 경우 SIGVTALRM : 프로세스 실행시간 관리를 위한 시그널1 SIGPROF : 프로세스 실행시간 관리를 위한 시그널2 SIGWINCH : Window change SIGIO, SIGPOLL : Input/output is now possible SIGPWR, SIGLOST : Power failure SIGUNUSED, SIGSYS : Unused signal.</description>
    </item>
    
    <item>
      <title>Thread</title>
      <link>https://aswinblue.github.io/Blog/post/linux/thread/</link>
      <pubDate>Sun, 23 Jul 2023 15:05:46 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/thread/</guid>
      <description>Thread thread는 process의 경량화 버전으로 생각할 수 있다. pthread_create() 함수로 fork 명령을 대체하고, pthread_join() 으로 wait 명령을 대체하면 process 대신 thread를 동작시킨다. thread는 함수를 실행시키는 것이 기본이며, 함수를 실행시킬 때 넣을 인자와, 함수의 리턴값을 받을 인자를 pthread_create의 파라미터로 받는다. 리눅스 프로세스 표시 목록에 LWP(light-weight-process) 항목으로 표시되며, proces ID가 같더라도 LWP ID가 다르면 같은 process 안의 thread인 것. pthread_exit() 로 thread만 종료시킬 수 있다. main process가 종료되면 딸려있는 thread들도 함께 종료된다. 다만, main thread만 pthread_exit으로 종료시키면 process가 종료되지 않고 main thread만 종료되고 다른 thread들은 계속 구동되는 형태가 되므로 주의한다.</description>
    </item>
    
    <item>
      <title>Process</title>
      <link>https://aswinblue.github.io/Blog/post/linux/process/</link>
      <pubDate>Tue, 18 Jul 2023 20:15:29 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/process/</guid>
      <description>Process Program vs Process Process : 실행중인 프로그램 Program : 실행 가능한 파일 Process는 메모리에 올라가 있는 상태의 프로그램을 의미한다. C언어 Program to Process C언어로 구성된 프로그램은 전처리 - 컴파일 - 링킹 - 로딩의 과정을 거친다. 전처리 : # 으로 시작하는 라인들을 알맞은 형태로 치환한다. 컴파일 : C언어(high-level language)를 어셈블리어(기계어) 로 변환한다. 링킹 : 외부의 ELF(Executable and Linkable Format) 파일들을 호출할 수 있도록 연결한다. 로딩 : 최종 생성된 파일을 실행시켜 메모리에 올려 프로세스로 만든다.</description>
    </item>
    
    <item>
      <title>System_programming</title>
      <link>https://aswinblue.github.io/Blog/post/linux/system_programming/</link>
      <pubDate>Sat, 15 Jul 2023 08:35:21 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/system_programming/</guid>
      <description>System Programming 프로그램이 동작하는 구조는 크게 application, kernel, HW 로 분리할 수 있다. _____________| Library |¯¯¯¯¯¯¯¯¯¯¯¯¯ Application level------------------------------_____________|System call|¯¯¯¯¯¯¯¯¯¯¯¯¯ Kernel level------------------------------_____________| Hardware |¯¯¯¯¯¯¯¯¯¯¯¯¯ H/W level------------------------------ application level에서는 library를 사용하며, 이 코드들은 library buffer를 사용한다. (open(), read(), write(), close() &amp;hellip;) 시스템에서 제공하는 최적의 buffer 단위로 disk에서 값을 읽어오고, library buffer에 담아두면 작은단위로 읽어올 때 효율적이다. 예를들어, 한 줄씩 파일을 읽어야 한다면, 1byte씩 파일에서 &amp;lsquo;\n&amp;rsquo;을 감지할 때 까지 읽을 수 있지만, BUF_SIZ만큼 파일에서 읽어서 library buffer에 담아두고 library buffer를 1byte씩 읽으며 &amp;lsquo;\n&amp;rsquo;를 찾는 것이 실행 속도는 더 빠르다.</description>
    </item>
    
    <item>
      <title>Make</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/make/</link>
      <pubDate>Thu, 13 Jul 2023 18:35:05 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/make/</guid>
      <description>make 분할 컴파일을 통해 컴파일 작업 효율을 올리고, 이 과정을 자동화 하기 위해 일괄처리를 도와주는 도구이다. batch 파일로 컴파일 하면, 변경점을 감지하지 못해 batch파일을 수정하지 않고서는 분할 컴파일을 수행할 수 없다. make파일은 파일들 간의 의존성을 정의하여, 특정 파일이 수정되면 어떤 파일을 컴파일 해야하는지 알아서 판단해 준다. 리눅스 시스템의 수정 시간을 확인하여, 빌드 결과물이 생성된 시간과 소스가 수정된 시간을 비교해서 컴파일 혹은 링킹이 다시 필요한지 판단하는 원리이다. 기본구조 파일 이름은 Makefile 으로 생성한다.</description>
    </item>
    
    <item>
      <title>Shell Programming</title>
      <link>https://aswinblue.github.io/Blog/post/linux/shell_programming/</link>
      <pubDate>Thu, 13 Jul 2023 18:29:44 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/shell_programming/</guid>
      <description>Shell Programming 리눅스 쉘 프로그래밍에 대해 기술한다. 쉘 프로그래밍은 bash, sh 등의 명령어를 활용한 로직을 칭하며, 리눅스 환경에서 text 파일 안에 명령어를 작성해 놓고, 실행하는 방식으로 사용한다. 명령어가 든 파일의 확장자는 보통 .sh 로 세팅한다. (윈도우 OS의 .batch 와 유사) .sh 파일 작성 새로 생성된 text 파일은 확장자가 .sh 라도 실행 권한이 없기 떄문에 chmod 명령어로 권한을 수정해야 한다.
ex) chmod a+x &amp;lt;파일이름&amp;gt; 명령으로 모든 사용자에 대해 실행 권한을 부여할 수 있다.</description>
    </item>
    
    <item>
      <title>Aws</title>
      <link>https://aswinblue.github.io/Blog/post/cloud/aws/</link>
      <pubDate>Wed, 12 Jul 2023 21:12:55 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/cloud/aws/</guid>
      <description>Aws Aws 로그인 root 로그인과 IAM 로그인이 있다. 필요한 권한만 할당된 IAM 계정을 사용하는 것이 안전하며, root는 외부로 공유되지 않게 하고 보안을 철저히 한다. Window 서버 생성 window 서버 vs Linux 서버
중소기업쪽에서는 보안 및 관리할 것들이 줄어드는 Window 서버를 많이 선호하는 편이다. t 시리즈는 범용서버이다. t2.large는 꽤 큰 서버이다. 프리티어를 사용하면 일부 서비스를 무료로 사용할 수는 있지만, 성능이 좋지는 않다. 좌측상단 &amp;lsquo;서비스&amp;rsquo;를 선택, EC2를 찾아서 들어간다. (또는 검색창에서 EC2를 검색)</description>
    </item>
    
    <item>
      <title>Gcc</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gcc/</link>
      <pubDate>Mon, 10 Jul 2023 22:13:06 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gcc/</guid>
      <description>GCC C / C++ 언어를 컴파일 해 주는 도구이다. 리눅스에서는 apt 명령으로 설치 가능하며, 윈도우에서는 Mingw을 이용하여 설치 가능하다. gcc는 컴파일러를 포함한 패키지일 뿐, 내부적인 컴파일러는 따로 있다. (cc1 등)
GCC 컴파일 동작 순서 gcc main.c 파일을 동작시키면 main.c파일을 컴파일하여 실행파일인 a.out 파일을 생성하게 된다.
하지만 내부적으로는 아래와 같은 과정을 거치게 된다.
전처리 : c언어로 구현된 .c 파일을 전처리가 완료된 .i 파일로 변환한다.
gcc -E main.c -o a.i : main.c 파일을 a.</description>
    </item>
    
    <item>
      <title>Linux_introduction</title>
      <link>https://aswinblue.github.io/Blog/post/linux/linux_introduction/</link>
      <pubDate>Mon, 10 Jul 2023 21:31:47 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/linux_introduction/</guid>
      <description>Linux 생성 배경 Unix unix는 범용 다중 사용자 방식의 시분할 운영체제이다. 즉, multi-user를 목적으로 개발된 운영체제이다. Dennis Ritche, Ken Thompson, Douglas Mcllroy 등이 주축이 되어 개발 이후 다양한 회사들에 의해 개발이 지속되어, 표준화의 필요성이 생겼고, IEEE에서 제안한 POSIX(Portable Operating System Interface) 라는 표준 인터페이스를 따르게 되었다. 리눅스는 unix를 기반으로 개발된 os이다. GNU Richard Stallman이 창시한 FSF(Free Software Foundation) 의 프로젝트 GNU 리눅스도 GNU의 GPL(General Public License) 에 의해 배포된다. 무료로 사용 가능하며 GPL 소스를 적용된 코드를 수정하여 재판매가 가능하지만, 해당 코드를 공개해야 하며, 개발자는 코드로 인해 발생하는 어떤 문제에 대해서도 법적 책임을 지지 않는다.</description>
    </item>
    
    <item>
      <title>Linux_env</title>
      <link>https://aswinblue.github.io/Blog/post/linux/linux_env/</link>
      <pubDate>Mon, 10 Jul 2023 21:04:56 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/linux_env/</guid>
      <description>Dev in Linux 리눅스 개발환경 구축을 위한 가이드
사용자 맞춤 설정 .bashrc 홈 디렉터리에 위치한 user별 설정 파일이다.
source ~/.bashrc 명령어로 언제든 새로고침 할 수 있다.
리눅스 콘솔 프롬프트를 보기 쉽게 색칠하기 위한 설정할 수 있다.
force_color_prompt=trueif [ -n &amp;#34;$force_color_prompt&amp;#34; ]; thenif [ -x /usr/bin/tput ] &amp;amp;&amp;amp; tput setaf 1 &amp;gt;&amp;amp;/dev/null; then# We have color support; assume it&amp;#39;s compliant with Ecma-48# (ISO/IEC-6429). (Lack of such support is extremely rare, and such# a case would tend to support setf rather than setaf.</description>
    </item>
    
    <item>
      <title>Virtual_box</title>
      <link>https://aswinblue.github.io/Blog/post/linux/virtual_box/</link>
      <pubDate>Sun, 02 Jul 2023 20:03:24 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/virtual_box/</guid>
      <description>VirtualBox 문제와 해결 root 계정 virtual box를 생성하면 기본 user의 이름은 vboxuser로 세팅되어 있다. 하지만 vboxuser는 sudo 권한이 없어 다른 설정을 수행 할 수가 없다. virtual box에서 root 계정 비밀번호를 변경하는 방법은 다음과 같다. virtualbox에서 원하는 ubuntu machine를 실행시킨다. machine이 실행되는 도중 shift키를 클릭하고 있는다. 부팅 모드 선택 화면이 뜨면 Advanced options for Ubuntu 를 선택하고, (recovery mode)표시가 되어있는 항목으로 부팅을 시도한다. 로딩이 완료되면 root 라는 항목을 선택하여 root 계정의 비밀번호를 재설정 할 수 있다.</description>
    </item>
    
    <item>
      <title>Flutter</title>
      <link>https://aswinblue.github.io/Blog/post/mobileapp/flutter/</link>
      <pubDate>Thu, 19 Jan 2023 22:01:38 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/mobileapp/flutter/</guid>
      <description>개발환경 및 기본 지식 구성 파일들 analysis_options.yaml : flutter rule을 설정하는 파일 assets : 이미지 등 리소스들을 저장하는 경로 lib/main.dart : 메인 App 소스가 구동되는 dart 파일 pubspec.yaml : 리소스 경로 및 API들을 설정할 수 있는 파일 (assets 폴더 설정 가능)
# 경로 설정flutter:assets:- assets/# dependency 설정dependencies:flutter:sdk: fluttercupertino_icons: ^1.0.2android/app/src/main/AndroidManifext.xml : 안드로이드 앱 개발시 권한 부여를 위한 파일
빌드 및 실행 main.dart 파일을 지정하고 실행시켜야 한다.</description>
    </item>
    
    <item>
      <title>Computer Science</title>
      <link>https://aswinblue.github.io/Blog/post/computerscience/computer_science/</link>
      <pubDate>Thu, 19 Jan 2023 21:59:14 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/computerscience/computer_science/</guid>
      <description>Computer Science CPU Segment 프로세스가 사용하는 메모리를 Segment라 칭하며, 리눅스에서는 5가지 종류로 이를 분류한다.
코드 세그먼트 : 실행 가능한 코드가 위치한 영역으로, text segment라고도 부른다. 데이터 세그먼트 : 코드 실행에 필요한 데이터가 있는 영역으로, 전역변수 및 전역 상수들이 위치한다. 읽기/쓰기가 모두 가능한 데이터들은 data segment에 저장된다. 읽기만 가능한 상수 데이터들은 rodata(read-only) segment 에 저장된다. BSS 세그먼트 : Block Started by Symbol 의 약자로, 컴파일시점에 값이 정해지지 않은 전역변수가 저장되는 영역이다. 이 영역은 프로그램 시작시 모두 0으로 초기화 된다.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://aswinblue.github.io/Blog/post/git/git/</link>
      <pubDate>Sat, 09 Jul 2022 10:58:55 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/git/git/</guid>
      <description>Git Cache Cache 확인: git ls-files --stage FILE_PATH Cache 삭제: git rm -r --cached FILE_PATH &#39;PATH&#39; already exists in the index 오류가 발생했을 때, cache를 확인하고 삭제하면 해결 가능하다. config git config 명령으로 git 관련 setting을 확인 및 설정할 수 있다. git config --list : 설정된 내용 확인 git config --add : 설정 추가 --system : 컴퓨터 환경에 적용 --global : 사용자 환경에 적용 --local : repository별로 설정 적용, default값 git config --global user.</description>
    </item>
    
    <item>
      <title>thymeleaf</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/thymeleaf/</link>
      <pubDate>Wed, 29 Jun 2022 20:00:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/thymeleaf/</guid>
      <description>Thymeleaf 서버에서 view를 구성할 때 사용하는 라이브러리 태그 형식의 문법을 사용하며 vue와 유사하다. 기본 문법 thymeleaf 공식 튜토리얼 에서 기본적인 문법을 확인할 수 있다. 태그 안에 th:속성=&amp;quot;값&amp;quot; 형태의 속성을 추가하는 형태로 사용한다. text &amp;lt;span th:text=&amp;quot;${text}&amp;quot;&amp;gt;default text&amp;lt;/span&amp;gt;: 서버에서 &amp;rsquo;text&amp;rsquo;라는 이름으로 정의한 태그가 있으면 text를 표시한다. text변수가 없으면 &amp;lt;span&amp;gt;default text&amp;lt;/span&amp;gt;를 표시한다. utext &amp;lt;span th:utext=&amp;quot;${utext}&amp;quot;&amp;gt;default text&amp;lt;/span&amp;gt;: &amp;rsquo;text&amp;rsquo; 이름으로 정의한 텍스트를 &amp;lsquo;span&amp;rsquo; 태그에 넣어 표시한다. &amp;rsquo;text&amp;rsquo;변수가 없으면 &amp;lsquo;default text&amp;rsquo;를 표시한다. fragment &amp;lt;div th:fragment=&amp;quot;name&amp;quot;&amp;gt;: &amp;rsquo;name&amp;rsquo; 이라는 이름으로 fragment를 생성한다.</description>
    </item>
    
    <item>
      <title>Tailwind</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/tailwind/</link>
      <pubDate>Thu, 02 Jun 2022 21:55:38 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/tailwind/</guid>
      <description>Tailwind Css 프레임워크로 빠르고 효율적으로 css를 설정할 수 있는 툴이다. Tailwind Docs Installation tailwind 모듈 설치
npm install -D tailwindcss@latest 명령을 사용하여 설치가 가능하다. npx tailwindcss init 명령을 사용하면 현재 경로에 tailwind.config.js 파일이 생성되며, 현재 프로젝트에서 tailwind를 적용할 수 있게 된다. tailwind.config.js 파일은 다음과 같이 구성된다. module.exports = {// 포함할 항목content: [&amp;#39;./src/**/*.{html,js,jsx,ts,tsx, mustache}&amp;#39;],// 제외할 항목 (최신 버전에서 사용되지 않는 문법)// purge: [&amp;#34;./src/**/*.html&amp;#34;, &amp;#34;./src/**/*.js&amp;#34;],// jit mode는 purge와 함께 세트로 사용되었고, 세트로 사라졌다.</description>
    </item>
    
    <item>
      <title>Spring_boot</title>
      <link>https://aswinblue.github.io/Blog/post/webserver/spring_boot/</link>
      <pubDate>Mon, 30 May 2022 19:20:23 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webserver/spring_boot/</guid>
      <description>Spring Boot Spring boot는 서버 생성을 위한 도구로, spring 프레임워크에 편의성을 향상시킨 프레임워크이다. Java, Kitlin, Groovy 등의 언어로 구현이 가능하다. 개발환경 java 기반으로 동작하기에 jdk 설치가 필요하다. (22년 기준) 11버전 이상을 다운받는것을 추천한다. IDE vs code를 사용한다면 확장패키지로 &amp;lsquo;Java Extension Pack&amp;rsquo; 과 &amp;lsquo;Spring Boot Extension Pack&amp;rsquo; 을 설치한다. java 개발을 위한 eclips나 intelliJ를 사용해도 된다. spring 프로젝트 생성 start.spring.io 페이지에 들어가면 프로젝트를 생성할 수 있는 UI가 구성되어 있다. 원하는대로 설정 후 다운로드를 받아서 사용하면 된다.</description>
    </item>
    
    <item>
      <title>Algorithm</title>
      <link>https://aswinblue.github.io/Blog/post/algorithm/algorithm/</link>
      <pubDate>Sun, 24 Apr 2022 18:16:23 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/algorithm/algorithm/</guid>
      <description>Algorithm 그래프 탐색 SP(Shortest Path) 단일 출발점에서 단일 목적지까지 최단 경로를 찾는 알고리즘
DFS 용도 : 경로가 있는지 확인할 때 사용 가능 자로구조 : stack 방법 : 시작 node를 stack에 넣는다. stack이 모두 빌때까지 아래 동작을 반복한다. stack의 top을 현재 node로 설정한다. 현재 node를 &amp;lsquo;visited&amp;rsquo; 처리하고 stack에서 제거한다. 다음으로 이동할 node가 있는지 확인한다. 다음으로 이동할 node &amp;lsquo;A&amp;rsquo;가 있다면, 현재 node에서 그다음에 탐색할 방향을 stack에 push하고, node &amp;lsquo;A&amp;rsquo;도 stack에 push한다. 더이상 갈 곳이 없으면 현재 node의 visited 처리를 복원한다.</description>
    </item>
    
    <item>
      <title>VsCode</title>
      <link>https://aswinblue.github.io/Blog/post/developtips/vscode/</link>
      <pubDate>Sat, 16 Apr 2022 09:07:48 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/developtips/vscode/</guid>
      <description>VS code visual studio code 사용법 개발환경 C / C++ 컴파일러 gcc 혹은 mingw 설치가 필요하다. 인터넷에서 설치하도록 한다. 설정파일 컴파일 및 실행을 위해서는 launch.json, setting.json, tasks.json 파일이 필요하다. vs code에서 알아서 작성해 주지만, 기본 설정으로 부족한 부분은 수정해야 한다. # settings.json{&amp;#34;C_Cpp_Runner.cStandard&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;C_Cpp_Runner.cppStandard&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;C_Cpp_Runner.msvcBatchPath&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;C_Cpp_Runner.warnings&amp;#34;: [&amp;#34;-Wall&amp;#34;,&amp;#34;-Wextra&amp;#34;,&amp;#34;-Wpedantic&amp;#34;],&amp;#34;C_Cpp_Runner.enableWarnings&amp;#34;: true,&amp;#34;C_Cpp_Runner.warningsAsError&amp;#34;: false,&amp;#34;C_Cpp_Runner.compilerArgs&amp;#34;: [],&amp;#34;C_Cpp_Runner.linkerArgs&amp;#34;: [],&amp;#34;C_Cpp_Runner.includePaths&amp;#34;: [],&amp;#34;C_Cpp_Runner.includeSearch&amp;#34;: [&amp;#34;*&amp;#34;,&amp;#34;**/*&amp;#34;],&amp;#34;C_Cpp_Runner.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;_stl</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;_stl/</link>
      <pubDate>Tue, 12 Apr 2022 19:17:21 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;_stl/</guid>
      <description>C++ STL 자료구조 map key-value 쌍으로 이루어진 tree형태의 자료구조 중복을 허용하지 않음 C++에서는 red black tree로 구현되어 삽입,삭제가 O(log n) 안에 이루어진다. 내부적으로 key를 기준으로 오름차순으로 자료를 정렬한다. 헤더 : #include &amp;lt;map&amp;gt;
선언 : map&amp;lt;int, int&amp;gt; map1;
내림차순으로 선언 : map &amp;lt;int, int, greater&amp;gt; map2 삽입 : insert : map1.insert({&amp;quot;key&amp;quot;,VALUE}) [] : map1[&amp;quot;key&amp;quot;] = VALUE 삭제 : 특정 index : map1.erase(map1.begin()+2) 특정 key : map1.erase(KEY) 구간 : map1.erase(map1.begin(), map1.end()) 전체 : map1.</description>
    </item>
    
    <item>
      <title>Window</title>
      <link>https://aswinblue.github.io/Blog/post/developtips/window/</link>
      <pubDate>Sat, 19 Mar 2022 08:29:51 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/developtips/window/</guid>
      <description>#MS Window
MS window 사용시 필요한 편이 기능들을 나열 WSL2 윈도우에서 리눅스를 실행하는 방법이다. windows 10 이상부터 지원 가능하며, microsoft store에서 ubuntu를 설치하는 방식이다. PowerShell을 관리자 권한으로 실행하여 아래 명령어 입력 $ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
$ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
$ wsl &amp;ndash;set-default-version 2
WSL 콘솔에서 explorer.exe . 를 입력하면 현재 경로를 윈도우의 파일 탐색기로 열 수 있다. 해당 경로에 파일을 옮기면 윈도우-리눅스 간 파일 이동이 가능하다.</description>
    </item>
    
    <item>
      <title>Firebase_react</title>
      <link>https://aswinblue.github.io/Blog/post/databases/firebase_react/</link>
      <pubDate>Sat, 12 Feb 2022 19:32:34 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/databases/firebase_react/</guid>
      <description>Firebase with React react에서 firebase를 활용하는 방법 firebase SDK를 설치하거나 웹상에서 설치없이 사용하는 방법은 firebase 기본을 참조 인증 (Auth) firebase 로 계정 생성 및 로그인 firebase API를 import하여 사용 &amp;lt;AppFirebase.js&amp;gt; import firebase from &amp;#34;firebase/compat/app&amp;#34;;import &amp;#34;firebase/compat/auth&amp;#34;;const firebaseConfig = {apiKey: process.env.REACT_APP_API_KEY,authDomain: process.env.REACT_APP_AUTHDOMAIN,projectId: process.env.REACT_APP_PROJECTID,storageBucket: process.env.REACT_APP_STORAGEBUCKET,messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,appId: process.env.REACT_APP_APPID};export default firebase.initializeApp(firebaseConfig);export const authService = firebase.auth(); AppFirebase.js 를 활용하여 business logic에 필요한 로그인 / 회원가입 기능을 구현 &amp;lt;Auth.</description>
    </item>
    
    <item>
      <title>Cryptocurrency</title>
      <link>https://aswinblue.github.io/Blog/post/crypto/cryptocurrency/</link>
      <pubDate>Wed, 02 Feb 2022 13:22:27 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/crypto/cryptocurrency/</guid>
      <description>Cryptocurrency Cryptographic Hash function hash function은 아래와 같은 속성을 갖는다. 모든 크기의 String을 input 으로 받는다. 정해진 크기의 output을 생성한다. (bitcoin에서는 256bit) 적당한 시간 안에 계산이 가능하다. (계산 시간이 너무 길지 않다) cryptographic hash function은 아래와 같은 security 속성을 추가로 갖는다.
collision-free hiding puzzle-friendly 속성1. collision-free x != y 라면, H(x) = H(y) 인 경우를 찾을 수 없어야 한다. 이 말은 collision 이 존재하지 않는다는 뜻은 아니다. num(possible_input) &amp;gt; num(possible_outputs) 이다.</description>
    </item>
    
    <item>
      <title>Firebase</title>
      <link>https://aswinblue.github.io/Blog/post/databases/firebase/</link>
      <pubDate>Wed, 19 Jan 2022 21:02:46 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/databases/firebase/</guid>
      <description>firebase firebase는 실시간 db로 유명하며, google에 인수되고 폭이 넓어졌다. Amazon의 Amplify가 firebase와 유사하다. 일정 사용량 까지는 무료로 사용 가능하며, 이후에는 요금이 부가된다. 설치 및 사용 온라인으로 콘솔에 접속하여 프로젝트를 생성 및 설정하고, firebase sdk를 로컬에 다운받아 코드에 적용한다. firebase는 다양한 운영체제에 설치 가능하며, 각각의 설치 방법을 따르면 된다. (웹에서는 설치하지 않고 url로 참조해 사용할 수도 있다.) 버전이 올라감에 따라 참조방법, 인터페이스 등 사용법이 바뀌는 경우가 많으니 항상 docs를 잘 살펴보자</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://aswinblue.github.io/Blog/post/golang/golang/</link>
      <pubDate>Fri, 14 Jan 2022 21:52:14 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/golang/golang/</guid>
      <description>Go 설치 및 프로젝트 생성 구글 검색을 통해 설치파일을 다운받는다. root 디렉터리 설정이 필요하다.(&amp;lsquo;C:\Go, &amp;lsquo;/usr/local/go/bin/&amp;rsquo;) 이후 생성할 프로젝트는 이 root 디렉터리 하위 경로에 생성된다. 외부 경로에는 프로젝트를 생성할 수 없다. root 디렉터리 안 src 디렉터리에 프로젝트를 생성한다. Go는 npm, pip 와 같이 패키지 매니저가 없다. git 등에서 코드를 받아오면 src 디렉터리 안에 도메인별로 정리해서 관리하는게 정석이다. 문법 printf format specifier %v: used as a placeholder for the default format representation of a value %+v: a detailed representation of the value, including all the fields and their corresponding values for structs and maps.</description>
    </item>
    
    <item>
      <title>Tensorflow</title>
      <link>https://aswinblue.github.io/Blog/post/machinelearning/tensorflow/</link>
      <pubDate>Sat, 27 Nov 2021 08:15:42 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/machinelearning/tensorflow/</guid>
      <description>#Tensorflow
TensorFlow는 구글에서 수치연산을 위해 만든 라이브러리이다. 기본 개념 node와 edge로 구성된 graph를 이용해 수치 연산을 수행한다. node들은 특정한 데이터가 들어오면 연산을 수행하거나, 형태를 변경하거나, 결과를 출력하는 역할을 한다.
edge는 학습데이터가 저장되는 다차원 배열이다.
edge는 node에서 계산된 데이터를 다음 node로 이동시킨다.
edge는 방향성이 있으며(directed), tensor라 불린다.
archive.ics.uci.edu/ml 에서 학습용 데이터를 받아 사용할 수 있다.
설치 python과 pip를 설치한다. pip install tensorflow 명령을 수행한다. window에서 &amp;lsquo;client_load_reporting_filter.h&amp;rsquo; 파일을 찾지 못해 설치를 못했다면, path 경로가 너무 길어서 발생하는 오류이다.</description>
    </item>
    
    <item>
      <title>Kivy</title>
      <link>https://aswinblue.github.io/Blog/post/windowapp/kivy/</link>
      <pubDate>Thu, 09 Sep 2021 18:43:28 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/windowapp/kivy/</guid>
      <description>#kivy
Basic concepts Widget 어플리케이션을 구성하는 객체 widget은 다른 widget을 tree형태로 포함 가능하며 버튼, 라벨 등상호작용 가능한 객체 또는 Widget의 집합 위치는 좌표로 표현되는데 좌표는 좌측하단이 (0,0)이다. Layout 화면 구성을 설정한 요소 widget 혹은 layout을 포함 가능하다. structure main.py에 python으로 내용을 작성한다. class TheLabApp(App):passTheLabApp().run() main.py에서 선언한 class &amp;lsquo;TheLabApp&amp;rsquo; 에서 App을 뺀 TheLab을 따서 main.py와 같은 경로에 &amp;lsquo;TheLab.kv&amp;rsquo;파일을 생성한다. /|-main.py|-TheLab.kv .py파일에서 원하는 layout class를 상속받아 객체를 구성할 수도 있고, .</description>
    </item>
    
    <item>
      <title>Python 기초</title>
      <link>https://aswinblue.github.io/Blog/post/python/python_basic/</link>
      <pubDate>Wed, 01 Sep 2021 18:49:18 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/python/python_basic/</guid>
      <description>Python 기본 내장 함수 입력 한줄 받기 : a = input()
받은 값은 string 형태이다.
받은 단어 끊어서 해석 : a, b = input().split() split() 함수 안의 인자에 따라 구분자 설정 가능. 빈칸이면 공백을 기준으로 끊어줌
받은 단어 끊고 숫자로 변환 : a, b = map(int, input().split()) int 외 다른 형태도 사용 가능 출력 print() 와 sys.stdout.write() 로 화면에 출력할 수 있다. sys.stdout.write 안에는 string 형태만 적용할 수 있다. print 안에는 수식 등으로 string 및 byte를 표현 가능하다.</description>
    </item>
    
    <item>
      <title>Angular</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/angular/</link>
      <pubDate>Mon, 23 Aug 2021 19:46:09 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/angular/</guid>
      <description>Angular Angular JS와 Angular는 다르다. Angular JS는 초창기 Angular를 의미하고, 그냥 Angular는 Angular2 이상의 버전을 의미한다. javascript기반의 textscript를 사용한다. 확장자가 ts로 끝난다. 개발환경 세팅 nodejs 설치 $ sudo apt install npm :nodejs와 npm 동시에 설치 angular client 설치 $ npm install -g @angular/cli 명령어를 이용하여 설치 workspace 생성 client 설치가 완료되었으면 workspace를 생성하고 application을 생성한다.
$ ng new &amp;lt;application_name&amp;gt; 명령어를 이용하여 설치한다.
nodejs 버전이 낮다고 한다. github에서 받아서 빌드하여 써 보자.</description>
    </item>
    
    <item>
      <title>Spring basic</title>
      <link>https://aswinblue.github.io/Blog/post/webserver/spring/</link>
      <pubDate>Mon, 23 Aug 2021 19:21:55 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webserver/spring/</guid>
      <description>Spring basic 설치 spring CLI를 설치한다. 직접 다운받아서 원하는 곳에 압축을 푼 후 PATH설정을 해 주는게 빠르다.
참조 프로젝트 생성 CLI로 프로젝트를 생성해 보자. spring init --build=gradle -d=web -a=myApp -g=com.aswin.blue [location] --build=gradle 기본으로 maven을 사용하지만 gradle로 설정 가능하다. -d=web dependency를 web으로 설정 -a=myApp artifactId, 즉 project명을 설정한다. -g=com.aswin.blue 그룹 명을 설정한다. [location] 생성할 폴더를 지정한다. 없으면 새로 생성한다. 지정하지 않으면 zip 형태로 압축해서 생성한다. 설정 maven으로 프로젝트를 생성하면 pom.xml을 설정해야 한다.</description>
    </item>
    
    <item>
      <title>Jython</title>
      <link>https://aswinblue.github.io/Blog/post/java/jython/</link>
      <pubDate>Mon, 23 Aug 2021 19:20:47 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/java/jython/</guid>
      <description>Jython Java 환경에서 python을 실행하게 하는 방법 중 하나 역으로 Jython 환경에서 java를 실행 가능하기도 하다. spring에서 jython을 사용하는 방법에 대해 묘사하겠다. 설치 pom.xml에 의존성을 작성한다. pom을 사용하면 jython을 설치하지 않고 일부 동작이 실행되게 할 수 있지만, 외부 모듈 사용에는 제한적인 부분이 있기에 설치가 필요하면 설치를 해야한다. &amp;lt;!-- https://mvnrepository.com/artifact/org.python/jython --&amp;gt;&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.python&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;jython&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;2.7.0&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt; 실행 PythonInterpreter 을 선언한다. 이후 execfile, exec 함수를 이용하여 python 문법을 사용 가능하다. PythonInterpreter jython;jython.</description>
    </item>
    
    <item>
      <title>Web_scrapping</title>
      <link>https://aswinblue.github.io/Blog/post/developtips/web_scrapping/</link>
      <pubDate>Mon, 23 Aug 2021 19:00:44 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/developtips/web_scrapping/</guid>
      <description>Web Scrapping x-path /a/b/c/d/e/f/g/... 와 같이 특정 경로를 가진 개체를 가리키는 방법이다. //*[@id=&amp;quot;abcd&amp;quot;] // 는 모든 경로에서 찾겠다는 의미 는 모든 태그에 대해 찾겠다는 의미. *대신 TAG를 넣으면 &amp;lsquo;TAG&amp;rsquo; 라는 이름의 태그를 가진 항목에서만 검색함 @id=&amp;ldquo;abcd&amp;rdquo; 는 id라는 속성이 abcd 인 항목을 찾겠다는 의미 브라우저에서 자동으로 해줒기 때문에 보통은 걱정할 필요가 없다. 정규식 . : 하나의 문자 ^ : 문자열의 시작 $ : 문자열의 끝 * : 모든 문자 # : 하나의 숫자 정규식 참조 link</description>
    </item>
    
    <item>
      <title>GDB</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gdb/</link>
      <pubDate>Mon, 23 Aug 2021 18:49:15 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/gdb/</guid>
      <description>GDB GNU Debugger의 약자 유닉스의 디버거는 오픈소스가 아니라 GNU에서 새로 개발한 디버거 디버깅을 위해서는 register(레지스터 값), disassem(rip 부근 주소를 디스어셈 한 값), stack(스택의 값), backtrace(현재 rip에 도달 할 때 까지 거쳐간 함수들) 을 파악해야 하며, 이를 context(맥락) 이라 한다. pwndbg 플러그인을 설치하면 hacking에 관련된 내용을 디버깅하기 용이하다. https://github.com/pwndbg/pwndbg 주소에서 git을 clone 받고, ./setup.sh를 실행시키면 이후 gdb 명령을 칠 때 자동으로 pwndbg 플러그인이 적용된 gdb가 실행된다. 컴파일 gcc로 컴파일시 옵션에 -g 를 붙여야 소스를 보면서 디버깅이 가능 리눅스에서 컴파일한 파일은 ELF (Executable and Linkable Format) 의 실행 파일이 된다.</description>
    </item>
    
    <item>
      <title>React basic</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/react_basic/</link>
      <pubDate>Mon, 23 Aug 2021 18:46:22 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/react_basic/</guid>
      <description>React basic 개발환경 설치 및 실행 node.js 로 만들어진 create-react-app 툴을 이용하면 손쉽게 react 앱을 생성할 수 있다. npm을 설치하고 아래 명령어를 수행하여 create-react-app을 설치한다. npm install -g create-react-app 원하는 경로에 들어가 프로젝트를 생성한다. create-react-app &amp;lt;NAME&amp;gt; : NAME 경로에 프로젝트 생성 주의 : 프로젝트가 생성되는 폴더명은 대문자를 사용할 수 없다. 실행 npm run start 를 수행하면 localhost:3000에서 웹페이지를 퍼블리싱한다. 기본 설정 실행 포트 package.json 파일에서 &amp;quot;proxy&amp;quot;: &amp;quot;http://localhost:3000/&amp;quot; 과 같이 입력하면 실행시 포트를 3000으로 설정할 수 있다.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; basic</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/c&#43;&#43;/</guid>
      <description>C++ basics 매크로 #define MACRO 1 : MACRO 값으로 1을 지정 #undef MACRO : MACRO값에 지정된 내용 해제 여러줄의 매크로 값 지정 : #define PRINT(X) printf(&amp;#34;%d&amp;#34;, X);\printf(&amp;#34;%d&amp;#34;, (X) + 1);\printf(&amp;#34;%d&amp;#34;, (X) + 2); 매크로 합성 : #define A 1#define B 1#define C A##B // A##B = 12 함수형태 매크로 작성 : // 일반함수에는 &amp;#39;;&amp;#39; 를 붙이지만 매크로 함수에는 &amp;#39;;&amp;#39;를 붙일 필요가 없다.// 일관성을 갖기 위해 do-while문 안에 작성하면 매크로 함수에도 &amp;#39;;&amp;#39;를 붙이도록 할 수 있다.</description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/cmake/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/cmake/</guid>
      <description>CMake Cmake란 : C,C++ 언어 컴파일시 make 툴을 이용할 때, 규모가 큰 프로젝트에서 컴파일 의존성 관리를 쉽게 하기 위한 도구 명령어 cmake CMakeList.txt : CMakeList.txt파일 안의 내용을 수행한다.
cmake . : 파일 경로를 입력하면 해당 경로에서 CMakeList.txt파일을 찾아서 수행.
make : cmake를 이용해 생성한 파일들을 이용해 make로 컴파일
cmake 명령 후 make를 이용해 컴파일을 수행하면 부산물들이 많이 생성된다. 이를 방지하기 위해 보통 새로운 폴더를 만들어 넣어서 사용한다. 1. mkdir build2.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://aswinblue.github.io/Blog/post/ci_cd/docker/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/ci_cd/docker/</guid>
      <description>Docker 리눅스 커널의 cgroups와 namespace에 의해 제공되는 기술 가상화 기능의 일종으로, 별도의 OS를 갖지 않아 VM(Virtual Machine) 보다 가볍다. 게스트는 호스트 OS와 자원을 공유한다. immutable infrastructure : 서비스 운영 환경을 통째로 이미지화 하여 배포하는 형태 Startup 설치 링크 참조 docker api 리눅스 설치 : sudo apt-get install docker 실행 DockerFile 이름의 파일을 생성하고 내용을 채워넣는다.
공식 가이드
python 서버 실행 예시
# python:3.10의 이미지로 부터FROM python:3.9# 제작자 및 author 기입LABEL maintainer=&amp;#34;huisam@naver.</description>
    </item>
    
    <item>
      <title>Json in C&#43;&#43;</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/json_c&#43;&#43;/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/json_c&#43;&#43;/</guid>
      <description>Json library in C++ Rapid Json 커뮤니티 오픈소스로 다양한 예제코드를 찾을 수 있다. parsing 속도 다른 Json 파싱 라이브러리와 비교시 상위권에 위치 라이브러리 헤더 온리 사용이 가능 참조 https://joycecoder.tistory.com/9 https://github.com/Tencent/rapidjson/ </description>
    </item>
    
    <item>
      <title>Linux commands</title>
      <link>https://aswinblue.github.io/Blog/post/linux/linux_command/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/linux_command/</guid>
      <description>Linux Command 리눅스에서 사용되는 명령어들을 정리한다. 자주 사용되는 모듈의 명령어도 포함한다. 리눅스에서 명령어는 /usr/bin/ 폴더에 저장되며, 내부에 저장된 파일들은 각 유저들에게 실행권한이 있다. 유저 개인의 명령어를 따로 설정 및 관리하려면 ~/.bashrc 파일에서 특정 디리렉터리를 PATH에 추가하여 사용할 수 있다. 기본적으로 ~/bin/ 경로가 PATH에 추가되어 있다. export PATH=$PATH:추가할경로[:추가할경로2:추가할경로3:...] 명령어를 ~/.bashrc 에 추가하면 경로를 추가할 수 있다. ex) # in .bashrc filePATH=$PATH:/home/user/bashrc # 기존의 PATH에 /home/user/.bashrc 추가# 현재 PATH는 .bashrc 포함PATH=$PATH:/home/user/dir1:/home/user/dir2 # 기존의 PATH에 dir1, dir2 추가# 현재 PATH는 .</description>
    </item>
    
    <item>
      <title>spdlog C&#43;&#43;</title>
      <link>https://aswinblue.github.io/Blog/post/c&#43;&#43;/log_c&#43;&#43;/</link>
      <pubDate>Thu, 12 Aug 2021 10:41:00 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/c&#43;&#43;/log_c&#43;&#43;/</guid>
      <description>spdlog C++ 프로젝트에서 로그를 세팅할 수 있는 라이브러리 fast, header only, no dependency, .. 등 장점 참조 https://isocpp.org/blog/2014/11/spdlog https://github.com/gabime/spdlog</description>
    </item>
    
    <item>
      <title>Nodejs</title>
      <link>https://aswinblue.github.io/Blog/post/webserver/nodejs/</link>
      <pubDate>Mon, 20 Jul 2020 20:40:05 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webserver/nodejs/</guid>
      <description>Node.js 기본 명령 npm init : 패키지 생성 npm install : 라이브러리 설치 -P : package.json에 저장, 기본옵션 -O : optionalDependencies에 저장 -D, --no-save : 기록없이 다운로드 -g : 글로벌 설치, 모든 프로젝트에 적용 MODULE_NAME@VERSION : 버전 설정, latest는 가장 최근 버전을 의미 node main.js : 실행(main.js) npx &amp;lt;package_name&amp;gt; : 설치하지 않고 일회만 실행 node main.js : 패키지 실행 (main.js파일) npm audit : 의존성 문제가 발생했을 때, npm audit fix : 의존성 문제를 자동으로 해결하는 명령어, 일부 해결을 할 수는 있지만 package.</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://aswinblue.github.io/Blog/post/databases/mysql/</link>
      <pubDate>Thu, 02 Jul 2020 20:29:29 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/databases/mysql/</guid>
      <description>mysql 명령어 문법 참조 : http://tcpschool.com/mysql/mysql_basic_syntax
명령어에서 대소문자는 상관없다. mysql에서 주석은 #을 사용한다. 한줄 주속은 -- 을 사용한다. -- 뒤에 공백 없이 바로 문자나 문자가 아닌 문자가 올 경우, SQL 엔진에 따라 주석으로 인식되지 않을 수도 있어서, 일반적으로 -- (띄어쓰기 포함) 또는 -- - 같이 공백이나 의미 없는 문자를 추가해서 주석임을 명확히 해준다. 이건 DBMS에 따라 차이가 있지만, 일부 엔진(MySQL 등)은 -- 뒤에 공백이 있어야 주석으로 인식한다. 실행 및 로그인 mysql mysql 실행, 기본으로 설정된 user로 로그인됨 mysql -u 아이디 -p -u: 특정 아이디로 로그인 -p: 로그인시 비밀번호 입력하도록 데이터베이스 관리 DB 생성 UTF8 로 문자열 저장하기 CREATE DATABASE 데이터베이스_이름 default CHARACTER SET UTF8 DB 목록확인 show databases DB 선택 use DB_NAME 종료 EXIT 로그인 &amp;amp; 데이터베이스 선택 $ mysql -p DB_NAME -u USER_NAME 사용자 이름과 USER_NAME으로 DB_NAME 데이터베이스 실행 USER_NAME이 비어있으면 현재 로그인한 계정과 동일한 이름으로 로그인 시도 -u DB_NAME 옵션은 로그인 후 $use DB_NAME 과 같은 효과 테이블 생성 및 관리 (DDL) TABLE_NAME 테이블의 스키마 확인 desc TABLE_NAME</description>
    </item>
    
    <item>
      <title>PythonCGI</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/pythoncgi/</link>
      <pubDate>Thu, 02 Jul 2020 19:15:21 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/pythoncgi/</guid>
      <description>python CGI CGI는 Common Gateway Interface의 약자다. web application을 만들 수 있는 언어는 ruby, java, php 등 다양하지만 모두 CGI 규약을 따라 web server와 통신한다. web server는 사용자의 요청을 받으면 약속된 이름의 데이터를 환경변수로 web application에 전달하여 서로 교류한다. apache에서 python을 이용해 web application을 만들어 web server와 통신해 보자. $ a2enmod CGI 명령으로 apache의 CGI를 켜 주고, sudo service apache2 restart 로 설정 적용 /var/log/apache2/error.log 안에 apache 실행시 발생한 에러 로그가 담겨있다.</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/javascript/</link>
      <pubDate>Tue, 23 Jun 2020 20:38:45 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/javascript/</guid>
      <description>JavaScript 기본적으로 HTML 위에서 돌아가는 코드 body 태그 안에 태그를 넣고 안에 작성
document를 호출하고, .으로 함수를 호출한다.
querySelector(&amp;rsquo;&amp;rsquo;)로 원하는 element 선택 가능, &amp;lsquo;&amp;lsquo;안의 내용은 css 선택자 문법과 같음
querySelectorAll(&amp;rsquo;&amp;rsquo;)로 원하는 속성의 element들을 nodeList(배열과 유사)형태로 선택 가능
ex ) document.querySelector(&#39;body&#39;)
ex ) document.querySelector(&#39;#new&#39;)
ex ) document.write(&amp;quot;hello world&amp;quot;)
태그 안에 javaScript를 사용하는 속성값으로 사용
ex ) &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;hello&amp;quot; onclick=&amp;quot;alert(&#39;hello&#39;)&amp;quot;&amp;gt;
특정 태그 안에서 자기자신을 호출할 때에는 querySelector를 호출하지 않고 this를 사용하면 된다.</description>
    </item>
    
    <item>
      <title>Css</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/css/</link>
      <pubDate>Tue, 23 Jun 2020 20:38:05 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/css/</guid>
      <description>CSS 특정 개체에 효과를 부과한다. 이를 declaration 이라 칭한다. 중복의 제거 가능, 유지보수 수월, 가독성 증가 위에서 부터 아래로 읽어가며 효과 적용, 중복 불가능한 효과에 대해서는 이전 효과가 사라짐 tag 선택자 &amp;lt; calss 선택자 &amp;lt; id 선택자 로 우선 순위가 높다. html 문서 안에 &amp;lt;style&amp;gt; 태그 안에 작성 가능
ex ) &amp;lt;style&amp;gt; a { color:black; } &amp;lt;/style&amp;gt;
태그의 종류별로 속성 설정 가능
여기서 태그 a 는 선택자(selector)라고 한다.
선택자는 ,로 구별하여 함께 사용 가능</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>https://aswinblue.github.io/Blog/post/webapplication/html/</link>
      <pubDate>Tue, 23 Jun 2020 19:13:17 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/webapplication/html/</guid>
      <description>HTML W3C에서 HTML 규칙을 규정, 웹 브라우저 제작사들이 이를 참조하여 브라우저를 만든다. 태그 element라고 칭하기도 한다. 부모 자식 관계가 존재 &amp;lt;TAG_NAME&amp;gt; 로 시작하고 &amp;lt;/TAG_NAME&amp;gt;로 끝냄 태그별로 검색 엔진에서 노출되는 중요도가 다르다. 태그의 종류에 따라 줄 전체를 사용하거나(block level element), 내용의 크기 만큼의 공간만 사용하는 태그(lnline element)들이 있다. html : body와 head를 통틀어 묶은 최 고위 태그 관용적으로 &amp;lt;!doctype html&amp;gt; 을 붙여 쓴다. body : 본문을 묶는 태그 head : 본문을 설명하는 태그 속성(attribute) &amp;lt;TAG_NAME ATTRIBUTE&amp;gt; 와 같은 형태로 태그 이름 뒤에 붙음 body 속성 strong : 굵은 글씨</description>
    </item>
    
    <item>
      <title>Linux_apt</title>
      <link>https://aswinblue.github.io/Blog/post/linux/linux_apt/</link>
      <pubDate>Mon, 25 May 2020 18:30:15 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/linux/linux_apt/</guid>
      <description>Linux 서버에 개발 환경을 세팅하는데 뭔가 제대로 되지 않아 이미 환경설정을 해 본 다른 사람에게 원격으로 도움을 요청했다.
하지만 그 사람이 리눅스에 익숙하지 않았는지, 우리 서버를 잘못 만져 apt가 먹통이 되는 현상이 발생했다.
본 해프닝에 대해 서술하자면 아래와 같다.
원인 /bin 디렉터리 안의 python bin파일을 강제로 삭제한 것이 원인으로 추정된다.
환경 설정을 하는데 제대로 되지 않으니 sudo apt-get upgrade 명령도 남용하기도 했다.
현상 apt를 이용해 install, remove를 하려 하면 py3compile, py3clean 등에서 오류가 발생하였다.</description>
    </item>
    
    <item>
      <title>Hugo 환경세팅</title>
      <link>https://aswinblue.github.io/Blog/post/hugo/hugo_dev/</link>
      <pubDate>Sun, 10 May 2020 12:23:13 +0900</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/hugo/hugo_dev/</guid>
      <description>Hugo를 이용해 블로그 만들기 Git과 markdown을 이용하여 git을 블로그처럼 이용하는 사람들이 있다는 것을 알았다.
게다가 UI를 보기 좋게 꾸며줄 수 있는 툴들도 찾았는데, 그 중 Hugo를 사용해 보았다.
Hugo는 Go 언어로 짜여져 있어 apt-get으로도 설치가 가능하고, 소스 코드를 받아 빌드하여 쓸 수도 있다.
내 컴퓨터에는 Go가 이미 설치되 있던 터라 apt-get으로 hugo를 받아서 사용해 보았다.
설치는 정상적으로 되었고, 처음에는 잘 동작하는 듯 했는데, theme을 적용하니 ERROR들이 뜨기 시작했다.
인터넷 검색을 아무리 해 봐도 해결책이 보이지 않고, 해당 git에 issue를 날려보기도 했는데 응답이 없어서 혼자 이것저것 뒤져 보았다.</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://aswinblue.github.io/Blog/post/hugo/sample/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/post/hugo/sample/</guid>
      <description>Sample article showcasing basic Markdown syntax and formatting for HTML elements.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://aswinblue.github.io/Blog/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aswinblue.github.io/Blog/about/</guid>
      <description>Hugo, the world’s fastest framework for building websites</description>
    </item>
    
    
    
  </channel>
</rss>
